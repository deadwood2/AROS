Design of interconnections between Intuition, Graphics, x11gfx.hidd and WindowManager
=====================================================================================

Use Cases
=========

Codebase needs to support following 2 use cases:

1)  AxRT program opening an Intuition window on any Window Manager

    This is the usual case when a AxRT program is started under Linux. In such case there is already a "native"
    window manager running (like marco). Intution window will request handling it as undecorated window by
    window manager via _MOTIF_WM_HINTS. Window responds to close, move, resize via native Intuition controls.
    Additionally, "iconify" is mapped to "minimize". There is no "maximize" function. Customs gadgets will be
    rendered and they will support any application-defined events correctly.

2) Intuition acting as Window Manager for non AxRT programs

    In this case Intuition (as Window Manager) will create border/parent window that will be following Intuition
    conventions and will only render border area and gadgets. Client window will become child window. Intuition
    border window will respond to close, move, resize, iconify events correctly. Intuition border window will have
    a set of pre-defined gadgets matching closly window type requestest by the Client.

Routing of Events - General Approach
====================================

Intuition is receiving raw mouse and keyboard events from X server. Based on those, it detects user interactions with
gadgets and windows. It then, instead of directly acting on those interactions, sends messages to Window Manager.
Window Manager processes those messages, applies its constraints and sends back X events. Intuition reacts to those
events by "completing" the action.

This approach requires the Window Manager to conform to Extended Window Manager Hints specification as described here:
https://specifications.freedesktop.org/wm-spec/latest/index.html

Tested window managers:

* marco (MATE Desktop's WM)
* Intuition

Routing of Events - Details
===========================

--------------------|-------------------------------|-------------------------------|-------------------------------|
 Operation          |           Intuition           |        Window Manager         |           Intuition           |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Move window        | Send _NET_MOVESIZE_WINDOW with| Move window and send          | Get screen coordinates via    |
                    | only data.l[1] and data.l[2]  | ConfigureNotify XEvent        | XTranslateCoordinates call and|
                    | active                        |                               | finish the move with call to  |
                    |                               |                               | DoMoveSizeWindow passing new  |
                    |                               |                               | position and old size         |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Resize window      | Send _NET_MOVESIZE_WINDOW with| Resize window and send        | If new size is bigger than    |
                    | only data.l[3] and data.l[4]  | ConfigureNotify XEvent        | current bitmap size, enlarge  |
                    | active                        |                               | bitmap and update window's    |
                    |                               |                               | RastPort layer properties.    |
                    |                               |                               | Finish the resize with call to|
                    |                               |                               | DoMoveSizeWindow passing new  |
                    |                               |                               | size and old position         |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Iconify window     | Send WM_CHANGE_STATE with     | Minimize window               |                               |
                    | data.l[0] set to IconicState  |                               |                               |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Restack window     | Send _NET_RESTACK_WINDOW      | Restack window and possibly   | React to Expose XEvent by     |
                    |                               | send Expose XEvent            | copying backing pixmap to     |
                    |                               |                               | window                        |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Zoom window        | Send two _NET_MOVESIZE_WINDOW | See logic for Move window and | See logic for Move window and |
                    | messages, one for position and| Resize window                 | Resize window                 |
                    | another for size              |                               |                               |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Set window active  | Send _NET_ACTIVE_WINDOW with  | Activate selected window and  | React to FocusIn XEvent by    |
                    | w set to this window          | send FocusIn XEvent to        | calling int_activatewindow    |
                    |                               | selected window and FocusOut  | React to FocusOut XEvent by   |
                    |                               | to previously active window   | making current active window  |
                    |                               |                               | inactive                      |
--------------------|-------------------------------|-------------------------------|-------------------------------|
 Close window       | Send _NET_CLOSE_WINDOW with   | Send ClientMessage XEvent with| Send IDCMP_CLOSEWINDOW message|
                    | w set to this window          | type WM_DELETE_WINDOW         | and expect application code   |
                    |                               |                               | to call CloseWindow()         |
--------------------|-------------------------------|-------------------------------|-------------------------------|

OpenWindow / CloseWindow details:

OpenWindow()
                   
Intuition calculates properties of new window. Then it calls XCreateWindow to create the window. Next it calls 
AllocBitmap passing the opened window as private parameter in order to create a new bitmap that will be bound to the
Rastport of this window. Bitmap allocation call goes to x11gfx.hidd, which adds the passed window to the list of it
handled windows and is ready to process XEvents coming for that window. x11hidd Maps the X window.

CloseWindow()

As part of CloseWindow function, Intuition calls FreeBitMap on window's bitmap. This casuses x11.hidd to remove X11
window associated with that bitmap from xwindowlist and call XDestroyWindow.
