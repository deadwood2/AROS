=================================Introduction==================================

AxRuntime (AxRT) is a tool for application developers who enjoy creating
their applications using Amiga APIs.

The runtime allows developers to continue developing Amiga applications in
unmodified way while at the same time being able to utilize modern development
tools available on Linux or Windows like IDEs, debuggers, profilers, etc.

This solution lets developers compile their Amiga API-based applications as
Linux binaries. Once the features are implemented, tested and optimized using
the runtime on Linux or Windows, developers re-compile their applications for
their Amiga-like system of choice and perform final quality checking.

Applications created with AxRuntime can be distributed to Linux or Windows
communities, giving developers a much broader user base and a possibility to
invite developers from outside general Amiga community to contribute to the
application.

https://www.axrt.org/
https://github.com/deadw00d/AROS/tree/alt-runtime

================================Acknowledgement================================

AxRuntime is based on work of AROS projects, which is an open source
re-implementation of AmigaOS 3.1 API. More information on AROS is available
at: http://www.aros.org/

======================================FAQ======================================

1) Do I need to use special compiler and linker?

    No. Any compiler available on your Linux setup is usable out of
    the box.

2) How to get in contact with development team?

    At this point in time send an email to: deadwood@onet.pl

3) Will AxRuntime work under BSD, MacOS in future?

    Yes, support for other platforms is planned.

4) What does it mean that AxRuntime supports SMP (Symmetric Multiprocessing)?

    Unlike current Amiga-like platforms, Tasks and Processes in AxRuntime
    are distributed across different CPU cores. This means they execute in real
    parallel conditions.

    AxRuntime enables SMP in "forward-compatible" way. This means any
    application that has multiple tasks and is working correctly under the
    runtime, is guaranteed to be working correctly under the native platform.

    The original source code though might sometimes need modifications to work
    correctly under platform. This includes:

    1) SysBase->ThisTask is removed.

        SOLUTION: Use FindTask(NULL).

    2) It is not guaranteed that newly created Task with higher priority than
    current Task will be executed before current Task continues.

        SOLUTION: Use semaphores to serialize access and execution.

5) Will AxRuntime work under PPC Linux?

    This version is being considered and it will be made if there is strong
    need expressed by developer community.

6) Will AxRuntime packages be available via ppa repository?

    Yes, it is planned to provide such repository at some point.

7) Can native AROS x86_64 modules and executables be used?

    Yes, such binaries can be used under AxRuntime. For modules, its best to
    place them in ~/.axrt/Libs, which maps to USERSYS:Libs. For executables,
    they can't be started directly from linux console, but can be started
    from Ax-enabled AROS-Shell.

8) What C library does AxRuntime provide?

    AxRuntime does not provide its own implementation of C library, but
    directly uses C library of Linux. Also any application that is compiled
    for AxRuntime also uses the same Linux C library.
