=================================Introduction==================================

AxRuntime (AxRT) is a tool for application developers who enjoy creating
their applications using Amiga APIs.

The runtime allows developers to continue developing Amiga applications in
unmodified way while at the same time being able to utilize modern development
tools available on Linux or Windows like IDEs, debuggers, profilers, etc.

This solution lets developers compile their Amiga API-based applications as
Linux binaries. Once the features are implemented, tested and optimized using
the runtime on Linux or Windows, developers re-compile their applications for
their Amiga-like system of choice and perform final quality checking.

Applications created with AxRuntime can be distributed to Linux or Windows
communities, giving developers a much broader user base and a possibility to
invite developers from outside general Amiga community to contribute to the
application.

https://www.axrt.org/
https://github.com/deadw00d/AROS/tree/alt-runtime

================================Acknowledgement================================

AxRuntime is based on work of AROS projects, which is an open source
re-implementation of AmigaOS 3.1 API. More information on AROS is available
at: http://www.aros.org/

=============================Building your projects============================

1) What is available is current version?

    Current version is version V41.

    This is an early preview version allowing application developers to test
    compilation and execution of their applications against the runtime. This
    version is mainly aimed at gathering feedback on directions in which
    runtime should evolve, however simple applications will already be fully
    supported and usable.

    Notes:
    - In case of issues, please make sure you have only one monitor connected
      to your Linux when running this preview.
    - This version was developed and tested under Ubuntu 20.04 64-bit.
      Compatibility with other Linux distributions may vary. Ubuntu-based
      distribution like Linux Mint are supported.

2) How do I install and use the runtime?

2.1) If you are a Linux user.

    Runtime is composed of three modules: libaxrt-4.0.so and AXRTSYS and
    USERSYS directories. Application loads libaxrt-4.0.so, which then in turn
    initializes the runtime and user settings.

    Runtime is distributed as .deb package which can be downloaded from
    https://axrt.org/index.php?tab=download. Package name is libaxrt-4.0. The
    package installs into /usr/lib/x86_64-linux-gnu/axrt/4.0

2.2) If you are a Windows user.

    AxRuntime is confirmed to work with Windows Subsystem for Linux feature of
    Windows 10 and 11. This feature allows running "a Linux" in a background
    and since AxRuntime binaries are Linux binaries, they can also use this
    feature to give impression of running nativelly under Windows.

    If you are running a fairly recent Windows 10 or Windows 11, use the
    following guide to install WSL2:

    https://docs.microsoft.com/en-us/windows/wsl/tutorials/gui-apps

    If this does not work for you, you can still install a standalone X server
    following this guide, choosing option 1 - VcXsrv

    https://techcommunity.microsoft.com/t5/windows-dev-appconsult/running-wsl-gui-apps-on-windows-10/ba-p/1493242

3) How do I install and use the SDK?

    Runtime SDK is distributed as .deb package which can be downloaded from
    https://axrt.org/index.php?tab=download. Package name is libaxrt-4.0-dev. The package
    installs into /usr/lib/x86_64-linux-gnu/axrt-4.0 and /usr/include/axrt-4.0

4) How do I build an application using runtime?

4.1) Easy start

    The 'example' package contains a Makefile configured to build with
    the SDK. Add your source files to SRC variable and issue make command in
    Linux console.

    You can get the 'example' package from following places:
    https://github.com/deadw00d/AROS/tree/alt-runtime/arch/all-runtime/docs/distribution/example
    https://axrt.org/download/axrt/other/axrt-example_1.1.tar.gz
    /usr/share/doc/libaxrt-4.0-dev/example (*)

    (*) after installing libaxrt-4.0-dev package

4.2) Detailed - Requirements

    In order to build your application for Linux, the source code of such
    application needs to be available along with source code of dependencies
    which are not provided by AxRuntime itself or Linux.

    AxRuntime currently support programs written in C and C++. There is Pascal
    support being worked on.

4.3) Detailed - Compilation

    i.) Add path to header files and select axrt.specs specs file, example:

    CFLAGS = -I/usr/include/axrt-4.0 -specs=/usr/lib/x86_64-linux-gnu/axrt-4.0/axrt.specs

    ii.) To build a dual-run executable, add -fPIC flag

    CFLAGS += -fPIC

4.4) Detailed - Linking

    i.) Add axrt.ld to objects being linked, example:

    OBJ += /usr/lib/x86_64-linux-gnu/axrt-4.0/axrt.ld

    ii.) Add path to linker libraries and select axrt.specs specs file,
         example:

    LDFLAGS = -L/usr/lib/x86_64-linux-gnu/axrt-4.0 -specs=/usr/lib/x86_64-linux-gnu/axrt-4.0/axrt.specs

    iii.) To build a dual-run executable, add -shared flag

    LDFLAGS += -shared

    iv.) Add additional linker libraries to resolve symbols

4.5) Detailed - Running

    Execute the binary resulting from the build.

    $ ./<executable>

4.6) Detailed - Debugging

    Execute the binary resulting from the build through gdb

    $ gdb ./<executable>

    To debug a dual-run executable, add DT_DEBUG after each rebuild

    $ patchelf-debug --add-debug ./executable

4.7 Detailed - Porting

    As the current dominant Amiga platforms are 32-bit Big Endian, it can be
    assumed that your application code might also have some specific 32-bit Big
    Endian constructs. On the other hand, AxRuntime is 64-bit Little Endian, so
    your code might need to be generalized to work in both cases. Furtunatelly
    AxRuntime contains many pieces of helper code that can make these things
    transparent.

    The most frequently found issues is use of ULONG to transport a pointer.
    This is especially visible in MUI code. The solution is to change ULONG
    to IPTR which will auto adjust depending on whether you are compiling for
    32-bit or 64-bit system.

5) How do I compile a module (library, class) for the runtime?

    Support for compiling modules is not yet documented. Contact me directly if
    you need to build a module.

6) How do I distribute my application as self-contained boundle?

    AxRuntime supports also boundling so that users of application don't have
    to install the runtime system-wide from a package.

    In order to build such boundle:
    - Copy /usr/lib/x86_64-linux-gnu/libaxrt-4.0.so to applications directory
    - Copy contents of /usr/lib/x86_64-linux-gnu/axrt/4.0 directory to
      AXRTSYS subdirectory in application directory

    <Application Directory>
    |--> <Application Executable>
    |--> AXRTSYS
    |--> libaxrt-4.0.so

    If you are getting the following error when running the application:

    'error while loading shared libraries: libaxrt-4.0.so: cannot open shared
     object file: No such file or directory'

    then most likely setting 'rpath' to $ORIGIN failed during linking. You can
    check this by invoking:

    $ readelf <executable> -d | grep path
    0x000000000000000f (RPATH)              Library rpath: [$ORIGIN]

    If the string does not read $ORIGIN, then inspect and fix the axrt.specs
    file.

7) How to control behavior of AxRuntime through environment variables?

    AxRuntime supports a number of variables that alter its operations:

    AXRT_ROOT=path - defines path where runtime is located. Overrides the
    default location of /usr/lib/x86_64-linux-gnu/axrt/4.0. Priority is as
    follows:
    1) Relative (./AXRTSYS)
    2) AXRT_ROOT variable
    3) /usr/lib/x86_64-linux-gnu/axrt/4.0

    AXRT_DEBUG_PATH=1 - enables reporting on path conversion from Amiga to
    host.

    AXRT_ENHANCED_PATH_MODE=1 - enables enhanced path translation mode which
    tries to recover from some errors caused by Linux native libraries
    modifying Amiga-type paths.

8) I have a problem with Amiga-type paths being wrongly converted to Linux
   paths when working with C library functions.

    First thing to do is to enable reporting on path conversion by doing:

    $ export AXRT_DEBUG_PATH=1

    This will print to Linux console each time a conversion happens. Here you
    can see if a conversion happens at all. If not, it might be an issue with
    runtime itself. Please fill in a bug report describing in as much details
    the situation you are facing.

    If conversion happens, but is wrong try enabling enhanced mode:

    $ export AXRT_ENHANCED_PATH_MODE=1

    If the issue is solved, you can keep the mode enabled always in your
    application, but defining a global variable in one of your .c files:

    int __enhancedpathmode = 1;

    If the issue is not solved, your last option is to do path translation
    in your application so that you pass already translated (so Linux native)
    path to a function call. You can do this by using the following function:

    LONG Path2Host(CONST_STRPTR path, STRPTR buffer, LONG length);

    where 'path' is the input path and 'buffer' holds converted path.

9) Known issues

    a) AxRuntime has problems operating with dual-screen setup - for example
    menu items cannot be clicked. For the time being use of single monitor or
    monitor closing (same display on both monitors) is required.
