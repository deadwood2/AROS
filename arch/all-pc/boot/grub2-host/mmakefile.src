# Copyright (C) 2004-2025, The AROS Development Team. All rights reserved.
# Rules for building the grub2 boot and EFI
# binaries for the boot ISO, using the host compiler.

include $(SRCDIR)/config/aros.cfg

#MM- arch-common-grub2-host : grub2-host-quick grub2-efi-host-quick grub2-efi32-$(AROS_TARGET_CPU32)-quick
#MM  grub2-iso-setup        : grub2-host-quick grub2-efi-host-quick grub2-efi32-$(AROS_TARGET_CPU32)-quick grub2-aros-quick
#MM- bootloader-grub2       : arch-common-grub2
#MM- bootloader-grub2-isosetup : arch-common-grub2 grub2-iso-setup
#MM grub2-host : grub2-aros-fetch
#MM- grub2-host-quick : grub2-aros-fetch
#MM grub2-efi-host : grub2-aros-fetch
#MM- grub2-efi-host-quick : grub2-aros-fetch
#MM- grub2-efi32-host-quick : grub2-aros-fetch
#MM- grub2-efi32-i386-quick : grub2-efi32-host-quick

BOOT_GRUB := $(AROS_BOOT)/grub
BOOT_EFI  := $(AROSDIR)/EFI/BOOT/grub
GRUBSRCDIR := $(PORTSDIR)/grub/grub-$(GRUB2_VERSION)

$(BOOT_GRUB):
	%mkdirs_q $@

$(BOOT_GRUB)/fonts:
	%mkdirs_q $@

$(BOOT_GRUB)/i386-pc:
	%mkdirs_q $@

$(BOOT_EFI):
	%mkdirs_q $@

$(BOOT_EFI)/fonts:
	%mkdirs_q $@

$(BOOT_EFI)/$(AROS_TARGET_CPU)-efi:
	%mkdirs_q $@

ifneq ($(AROS_TARGET_CPU32),)
$(BOOT_EFI)/$(AROS_TARGET_CPU32)-efi:
	%mkdirs_q $@
endif

#MM
bootloader-grub2gfx-common: $(BOOT_GRUB)/splash.png $(BOOT_GRUB)/fonts/_unicode.pf2 $(BOOT_EFI)/splash.png $(BOOT_EFI)/fonts/_unicode.pf2

$(BOOT_GRUB)/splash.png: splash.png $(BOOT_GRUB)
		$(CP) $< $(BOOT_GRUB)

$(BOOT_GRUB)/fonts/_unicode.pf2: unicode.pf2 $(BOOT_GRUB)/fonts
		$(CP) $< $(BOOT_GRUB)/fonts/_unicode.pf2

$(BOOT_EFI)/splash.png: splash.png $(BOOT_EFI)
		$(CP) $< $(BOOT_EFI)

$(BOOT_EFI)/fonts/_unicode.pf2: unicode.pf2 $(BOOT_EFI)/fonts
		$(CP) $< $(BOOT_EFI)/fonts/_unicode.pf2

#MM
bootloader-grub2gfx-common-livecd: $(BOOT_GRUB)/fonts/unicode.pf2 $(BOOT_EFI)/fonts/unicode.pf2

$(BOOT_GRUB)/fonts/unicode.pf2: unicode.pf2 $(BOOT_GRUB)/fonts
		$(CP) $< $(BOOT_GRUB)

$(BOOT_EFI)/fonts/unicode.pf2: unicode.pf2 $(BOOT_EFI)/fonts
		$(CP) $< $(BOOT_EFI)

# avoid the make.tmpl s_flag in order to disable stripping of binaries
export DEBUG		    := yes
# remove all flags, just in case
export HOST_CFLAGS	    := 
export KERNEL_CFLAGS	:= 
export CONFIG_LDFLAGS   :=

DESTDIR     :=	$(HOSTGENDIR)/$(CURDIR)/host_binaries
CONFIG_OPTS :=  --build=$(AROS_HOST_CPU)-$(AROS_HOST_ARCH)      \
                --host=$(AROS_HOST_CPU)-$(AROS_HOST_ARCH)       \
                --datarootdir=$(DESTDIR)/share                  \
                --sysconfdir=$(DESTDIR)/etc                     \
                --enable-silent-rules                           \
                --disable-grub-mkfont                           \
                --disable-werror                                \
                --program-prefix=

ifeq ($(GRUB2_USELZMA),yes)
CONFIG_OPTS += \
		        --enable-liblzma
endif

ifeq ($(AROS_TOOLCHAIN),llvm)
ifneq ($(AROS_TARGET_CPU32),)
GRUB2_HOST_ENV=grub_cv_target_cc_link_format=-melf_$(AROS_TARGET_CPU32)
GRUB2_EFI32_ENV=grub_cv_target_cc_link_format=-melf_$(AROS_TARGET_CPU32)
GRUB2_HOST_ENV+=TARGET_CFLAGS="$(TARGET_ISA_32_CFLAGS)"
GRUB2_EFI32_ENV+=TARGET_CFLAGS="$(TARGET_ISA_32_CFLAGS)"
GRUB2_HOST_ENV+=TARGET_LDFLAGS="$(TARGET_ISA_32_LDFLAGS) -nostartfiles"
GRUB2_EFI32_ENV+=TARGET_LDFLAGS="$(TARGET_ISA_32_LDFLAGS) -nostartfiles"
GRUB2_HOST_ENV+=TARGET_CCASFLAGS="$(TARGET_ISA_32_AFLAGS) -Wa,--32"
GRUB2_EFI32_ENV+=TARGET_CCASFLAGS="$(TARGET_ISA_32_AFLAGS) -Wa,--32"
else
GRUB2_HOST_ENV=grub_cv_target_cc_link_format=-melf_$(AROS_TARGET_CPU)
endif
GRUB2_EFI_ENV=grub_cv_target_cc_link_format=-melf_$(AROS_TARGET_CPU)
GRUB2_EFI_ENV+=TARGET_LDFLAGS="$(TARGET_ISA_LDFLAGS) -nostartfiles"
endif

grub2-host-touchfileflag := $(GENDIR)/arch/all-pc/boot/.grub2-files-touched
grub2-efi-host-touchfileflag := $(GENDIR)/arch/all-pc/boot/.grub2-files-touched
grub2-efi32-host-touchfileflag := $(GENDIR)/arch/all-pc/boot/.grub2-files-touched

NOWARN_CLFAGS := $(NOWARN_IMPLICIT_FUNCTION_DECL) $(NOWARN_INT_CONVERSION) $(NOWARN_INCOMPAT_POINTER_TYPES)
KERNEL_ISA_CFLAGS := $(NOWARN_CLFAGS)

GRUB2_HOST_OPTS := \
                --target=$(AROS_TARGET_CPU)                     \
				$(CONFIG_OPTS)

%build_with_configure mmake=grub2-host compiler=host nix=yes \
        prefix="$(DESTDIR)" srcdir=$(GRUBSRCDIR) \
        package=pc extraoptions="$(GRUB2_HOST_OPTS) --with-platform=pc" \
        install_target= targetisaflags= config_env_extra="$(GRUB2_HOST_ENV)"

%build_with_configure mmake=grub2-efi-host compiler=host nix=yes \
        prefix="$(DESTDIR)" srcdir=$(GRUBSRCDIR) touch=no \
        package=efi-$(AROS_TARGET_CPU) extraoptions="$(GRUB2_HOST_OPTS) --with-platform=efi" \
        install_target= targetisaflags= config_env_extra="$(GRUB2_EFI_ENV)"

ifneq ($(AROS_TARGET_CPU32),)
GRUB2_EFI32_OPTS := \
                --target=$(AROS_TARGET_CPU32)                     \
				$(CONFIG_OPTS)
				
%build_with_configure mmake=grub2-efi32-host compiler=host nix=yes \
        prefix="$(DESTDIR)" srcdir=$(GRUBSRCDIR) touch=no \
        package=efi-$(AROS_TARGET_CPU32) extraoptions="$(GRUB2_EFI32_OPTS) --with-platform=efi" \
        install_target= targetisaflags= config_env_extra="$(GRUB2_EFI32_ENV)"
endif

PC_MODS	    := biosdisk
EFI_MODS    :=
GRUB2_MODS  :=	fshelp part_msdos part_amiga part_gpt \
              	fat ntfs ntfscomp affs sfs ext2 hfsplus iso9660 \
              	minicmd
ifeq ($(GRUB2_USELZMA),yes)
GRUB2_MODS  +=	xzio
endif
LST_FILES   :=	command fs moddep
MKIMG_OPTS  :=	-O i386-pc -p /$(AROS_DIR_BOOT)/grub
MKIMG_EFI   :=  -O $(AROS_TARGET_CPU)-efi -p /EFI/BOOT/grub
MKIMG_EFI32   :=  -O $(AROS_TARGET_CPU32)-efi -p /EFI/BOOT/grub

ifeq ($(CPU),x86_64)
    EFI_GRUB_IMG := BOOTX64.EFI
	EFI32_GRUB_IMG := BOOTIA32.EFI
else
    EFI_GRUB_IMG := BOOTIA32.EFI
endif

#MM
grub2-iso-setup: grub2-pc-iso-setup grub2-efi-iso-setup grub2-efi-iso-$(AROS_TARGET_CPU32)-setup

#MM
grub2-pc-iso-setup: $(BOOT_GRUB)/i386-pc
	@$(ECHO) Creating $(BOOT_GRUB)...
	@cd $(HOSTGENDIR)/$(CURDIR)/pc/grub-core                           	        && \
	../grub-mkimage $(MKIMG_OPTS) -d . -o core.img $(PC_MODS) $(GRUB2_MODS)     && \
	$(CP) *.img $(BOOT_GRUB)/i386-pc                                  	        && \
	$(CP) *.mod $(BOOT_GRUB)/i386-pc                                  	        && \
	$(CP) $(addsuffix .lst,$(LST_FILES)) $(BOOT_GRUB)/i386-pc         	        && \
	$(CAT) cdboot.img core.img > $(BOOT_GRUB)/i386-pc/grub2_eltorito

#MM
grub2-efi-iso--setup:
	$(NOP)

#MM
grub2-efi-iso-setup: $(BOOT_EFI)/$(AROS_TARGET_CPU)-efi
	@$(ECHO) Creating $(BOOT_EFI)...
	@cd $(HOSTGENDIR)/$(CURDIR)/efi-$(AROS_TARGET_CPU)/grub-core                && \
	../grub-mkimage $(MKIMG_EFI) -d . -o grub.efi $(EFI_MODS) $(GRUB2_MODS)     && \
	$(CP) grub.efi $(AROSDIR)/EFI/BOOT/$(EFI_GRUB_IMG)                     	    && \
	$(CP) *.mod $(BOOT_EFI)/$(AROS_TARGET_CPU)-efi                              && \
	$(CP) $(addsuffix .lst,$(LST_FILES)) $(BOOT_EFI)/$(AROS_TARGET_CPU)-efi

ifneq ($(AROS_TARGET_CPU32),)
#MM
grub2-efi-iso-i386-setup: $(BOOT_EFI)/$(AROS_TARGET_CPU32)-efi
	@$(ECHO) Creating $(BOOT_EFI)/$(AROS_TARGET_CPU32)-efi...
	@cd $(HOSTGENDIR)/$(CURDIR)/efi-$(AROS_TARGET_CPU32)/grub-core         	    && \
	../grub-mkimage $(MKIMG_EFI32) -d . -o grub.efi $(EFI_MODS) $(GRUB2_MODS)   && \
	$(CP) grub.efi $(AROSDIR)/EFI/BOOT/$(EFI32_GRUB_IMG)                  	    && \
	$(CP) *.mod $(BOOT_EFI)/$(AROS_TARGET_CPU32)-efi                            && \
	$(CP) $(addsuffix .lst,$(LST_FILES)) $(BOOT_EFI)/$(AROS_TARGET_CPU32)-efi
	
#MM grub2-efi-iso-i386-setup : grub2-efi32-host
endif

%common
