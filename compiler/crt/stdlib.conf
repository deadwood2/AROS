##begin config
version 1.2
basename Stdlib
libbasetypeextern struct StdlibBase
libbasetype struct StdlibIntBase
##end config

##begin cdef
#include <libraries/stdlib.h>
#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdlib.h>
#include <time.h>
##end cdef

##begin stubprivate
##end stubprivate

##begin cdefprivate
#include "__stdlib_intbase.h"
##end cdefprivate

##begin startup
##end startup

##begin functionlist
int __stdc_gmtoffset(void)
.skip 19
# == C99 functions ordered per include file ==
.skip 1
.skip 66
#
# * ctype.h: functions are declared as static inline functions
#
.skip 1
.skip 11
#
# * inttypes.h
intmax_t imaxabs(intmax_t j)
imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom)
.skip 1 # intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base)
.skip 1 # uintmax_t strtoumax(const char * restrict nptr, char ** restrict endptr, int base)
.skip 2
#intmax_t wcstoimax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)
#uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)
#
# * iso646.h: no functions in iso646.h
#
# * limits.h: no functions in limits.h
#
# * locale.h
char *setlocale(int category, const char *locale)
struct lconv *localeconv(void)
.skip 189
#
# * setjmp.h
int setjmp(jmp_buf env)
.unusedlibbase
void longjmp(jmp_buf env, int val)
.unusedlibbase
.skip 2
#
# * stdarg.h: implementation has to be provided by the compiler.
#
# * stdbool.h: no functions in stdbool.h
#
# * stddef.h: no functions in stddef.h
#
# * stdint.h: no functions in stdint.h
#
# * stdio.h:
int snprintf(char * restrict s, size_t n, const char * restrict format, ...)
int sprintf(char * restrict s, const char * restrict format, ...)
int sscanf(const char * restrict s, const char * restrict format, ...)
int vsnprintf(char * restrict s, size_t n, const char * restrict format, va_list arg)
int vsprintf(char * restrict s, const char * restrict format, va_list arg)
int vsscanf(const char * restrict s, const char * restrict format, va_list arg)
#
# * stdlib.h:
double atof(const char *nptr)
int atoi(const char *nptr)
long int atol(const char *nptr)
long long int atoll(const char *nptr)
double strtod(const char * restrict nptr, char ** restrict endptr)
float strtof(const char * restrict nptr, char ** restrict endptr)
long double strtold(const char * restrict nptr, char ** restrict endptr)
.skip 1 # long int strtol(const char * restrict nptr, char ** restrict endptr, int base)
.skip 1 # long long int strtoll(const char * restrict nptr, char ** restrict endptr, int base)
.skip 1 # unsigned long int strtoul(const char * restrict nptr, char ** restrict endptr, int base)
.skip 1 # unsigned long long int strtoull(const char * restrict nptr, char ** restrict endptr, int base)
.skip 1 # int rand(void)
.skip 1 # void srand(unsigned int seed)
.skip 1 # void *calloc(size_t count, size_t size)
.skip 1 # void free(void *memory)
.skip 1 # void *malloc(size_t size)
.skip 1 # void *malloc_align(size_t size, size_t alignment)
.skip 1 # void *realloc(void *oldmem, size_t newsize)
.skip 1 # void *realloc_nocopy(void *oldmem, size_t newsize)
.skip 1 # void abort(void)
.skip 1 # int atexit(void (*func)(void))
.skip 1 # int on_exit(void (*func)(int, void *), void *)
.skip 1 # void exit(int code)
.skip 1 # void _Exit(int)
#.alias _exit
void *bsearch(const void * key, const void * base, size_t count, size_t size, int (*comparefunction)(const void *, const void *))
void qsort(void * array, size_t count, size_t elementsize, int (*comparefunction)(const void * element1, const void * element2))
int abs(int j)
long labs(long j)
long long llabs(long long j)
div_t div(int numer, int denom)
ldiv_t ldiv(long int numer, long int denom)
lldiv_t lldiv(long long int numer, long long int denom)
int mblen(const char *s, size_t n)
.skip 4
#int mbtowc(wchar_t * restrict pwc, const char * restrict s, size_t n)
#int wctomb(char *s, wchar_t wc)
#size_t mbstowcs(wchar_t * restrict pwcs, const char * restrict s, size_t n)
#size_t wcstombs(char * restrict s, const wchar_t * restrict pwcs, size_t n)
#
# * string.h: memcpy is the same as memmove
void *memmove (void * dest, const void * src, size_t n)
.alias memcpy
char *strcpy (char * restrict dest, const char * restrict src)
char *strncpy (char * restrict dest, const char * restrict src, size_t n)
char *strcat (char * restrict dest, const char * restrict src)
char *strncat (char * restrict dest, const char * restrict src, size_t n)
int memcmp (const void * s1, const void * s2, size_t n)
int strcmp (const char * s1, const char * s2)
int strcoll (const char *s1, const char *s2)
int strncmp (const char * s1, const char * s2, size_t n)
size_t strxfrm (char * restrict s1, const char * restrict s2, size_t n)
void *memchr (const void * dest, int c, size_t n)
char *strchr (const char * s, int c)
.alias index
size_t strcspn (const char *s1, const char *s2)
char *strpbrk (const char * s1, const char * s2)
char *strrchr (const char * s, int c)
.alias rindex
size_t strspn (const char * s1, const char * s2)
char *strstr (const char * buf, const char * str)
.skip 1 # char *strtok (char * str, const char * sep)
void *memset (void * dest, int c, size_t n)
.skip 1 # char *__stdc_strerror (int n)
#.alias strerror
size_t strlen (const char * str)
#
# * time.h
.skip 1 # clock_t clock(void)
double difftime(time_t time2, time_t time1)
time_t mktime(struct tm * utim)
time_t time(time_t * tloc)
.skip 1 # char *asctime(const struct tm *)
.skip 1 # char *ctime(const time_t *)
.skip 1 # struct tm *gmtime(const time_t *)
.skip 1 # struct tm *localtime(const time_t *)
size_t strftime(char * s, size_t maxsize, const char * format, const struct tm * timeptr)
.skip 33
#
# * stdio.h: AROS specific support functions based on libnix
int __vcformat(void * data, int (*outc)(int, void *), const char * format, va_list args)
int __vcscan(void * data, int (*getc)(void *), int (*ungetc)(int, void *), const char * format, va_list args)
#
# * string.h: POSIX, BSD/UNIX, SAS/C
.skip 1
#void *memccpy(void *restrict, const void *restrict, int, size_t)
char *stpcpy(char *restrict dest, const char *restrict src)
.skip 2
#char *stpncpy(char *restrict, const char *restrict, size_t)
#int strcoll_l(const char *, const char *, locale_t)
.skip 1 # char *strdup(const char *)
.skip 2
#char *strerror_l(int, locale_t)
#int strerror_r(int, char *, size_t)
.skip 1 # char *strndup(const char *, size_t)
size_t strnlen (const char *ptr, size_t n)
.skip 1
#char *strsignal(int)
char *strtok_r(char *restrict str, const char *restrict sep, char **restrict saveptr)
.skip 1
#size_t strxfrm_l(char *restrict, const char *restrict, size_t, locale_t)
size_t strlcpy(char *dst, const char *src, size_t size)
size_t strlcat(char *dst, const char *src, size_t size)
char *strsep(char ** strptr, const char * sep)
char *strlwr(char * s)
char *strupr(char * s)
char *strrev(char * s)
int stch_l(const char * in, long * lvalue)
int stcd_l(const char * in, long * lvalue)
int stco_l(const char * in, long * lvalue)
int stcl_d(char * out, long lvalue)
int stcl_h(char * out, long lvalue)
int stcl_o(char * out, long lvalue)
int stcu_d(char * out, unsigned uivalue)
size_t stccpy(char *str1_ptr, const char *str2_ptr, size_t max)
char *stpsym(char *str_ptr, char *dest_ptr, int dest_size)
char *stpblk( const char * str )
#
# * strings.h: POSIX, BSD
int strcasecmp(const char * s1, const char * s2)
.skip 1
#int strcasecmp_l(const char *, const char *, locale_t)
int strncasecmp(const char * str1, const char * str2, size_t n)
.skip 1
#int strncasecmp_l(const char *, const char *, size_t, locale_t)
#
# * time.h: reentrant versions of some C99 functions (POSIX)
char *asctime_r(const struct tm * tm, char * buf)
char *ctime_r(const time_t * tt, char * buf)
struct tm *gmtime_r(const time_t * tt, struct tm * tm)
struct tm *localtime_r(const time_t * tt, struct tm * tm)
#
# * wchar.h: mostly unimplemented in stdc.library
#
.skip 14
#wint_t btowc(int)
#wint_t getwchar(void)
#int mbsinit(const mbstate_t *)
#size_t mbrlen(const char *, size_t, mbstate_t *)
#size_t mbrtowc(wchar_t *, const char *, size_t,mbstate_t *)
#size_t mbsrtowcs(wchar_t *, const char **, size_t,mbstate_t *)
#wint_t putwchar(wchar_t)
#int swprintf(wchar_t *, size_t, const wchar_t *, ...)
#int swscanf(const wchar_t *, const wchar_t *, ...)
#int vwscanf(const wchar_t * restrict format, va_list arg)
#int vswscanf(const wchar_t * restrict s, const wchar_t * restrict format, va_list arg)
#int vwprintf(const wchar_t *, va_list)
#int vswprintf(wchar_t *, size_t, const wchar_t *, va_list)
#size_t wcrtomb(char *, wchar_t, mbstate_t *)
wchar_t *wcscat(wchar_t * wcdst, const wchar_t * wcsrc)
.skip 1
#wchar_t *wcschr(const wchar_t *, wchar_t)
.skip 2
#int wcscmp(const wchar_t *, const wchar_t *)
#int wcscoll(const wchar_t *, const wchar_t *)
wchar_t *wcscpy(wchar_t * wcdst, const wchar_t * wcsrc)
.skip 2
#size_t wcscspn(const wchar_t *, const wchar_t *)
#size_t wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *)
size_t wcslen(const wchar_t * wcstr)
.skip 1
#wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t)
int wcsncmp(const wchar_t * wcstra, const wchar_t * wcstrb, size_t cnt)
wchar_t *wcsncpy(wchar_t * wcdst, const wchar_t * wcsrc, size_t cnt)
.skip 22
#wchar_t *wcspbrk(const wchar_t *, const wchar_t *)
#wchar_t *wcsrchr(const wchar_t *, wchar_t)
#size_t wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *)
#size_t wcsspn(const wchar_t *, const wchar_t *)
#wchar_t *wcsstr(const wchar_t *, const wchar_t *)
#double wcstod(const wchar_t *, wchar_t **)
# float wcstof(const wchar_t * restrict nptr, wchar_t ** restrict endptr)
#wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **)
#long int wcstol(const wchar_t *, wchar_t **, int)
#unsigned long int wcstoul(const wchar_t *, wchar_t **, int)
#wchar_t *wcswcs(const wchar_t *, const wchar_t *)
#int wcswidth(const wchar_t *, size_t)
#size_t wcsxfrm(wchar_t *, const wchar_t *, size_t)
#int wctob(wint_t)
#int wcwidth(wchar_t)
#wchar_t *wmemchr(const wchar_t *, wchar_t, size_t)
#int wmemcmp(const wchar_t *, const wchar_t *, size_t)
#wchar_t *wmemcpy(wchar_t *, const wchar_t *, size_t)
#wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t)
#wchar_t *wmemset(wchar_t *, wchar_t, size_t)
#int wprintf(const wchar_t *, ...)
#int wscanf(const wchar_t *, ...)
#
# * wctype.h: unimplemented in stdc.library
#
.skip 18
#int iswalnum(wint_t)
#int iswalpha(wint_t)
#int iswblank(wint_t)
#int iswcntrl(wint_t)
#int iswdigit(wint_t)
#int iswgraph(wint_t)
#int iswlower(wint_t)
#int iswprint(wint_t)
#int iswpunct(wint_t)
#int iswspace(wint_t)
#int iswupper(wint_t)
#int iswxdigit(wint_t)
#int iswctype(wint_t, wctype_t)
#wint_t towctrans(wint_t, wctrans_t)
#wint_t towlower(wint_t)
#wint_t towupper(wint_t)
#wctrans_t wctrans(const char *)
#wctype_t wctype(const char *)
##end functionlist
