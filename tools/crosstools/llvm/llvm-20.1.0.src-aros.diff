diff -ruN llvm-20.1.0.src/include/llvm/TargetParser/Triple.h llvm-20.1.0.src.aros/include/llvm/TargetParser/Triple.h
--- llvm-20.1.0.src/include/llvm/TargetParser/Triple.h	2025-03-04 19:51:43.000000000 +0000
+++ llvm-20.1.0.src.aros/include/llvm/TargetParser/Triple.h	2025-07-15 21:34:46.158949979 +0000
@@ -199,6 +199,7 @@
   enum OSType {
     UnknownOS,
 
+    AROS,
     Darwin,
     DragonFly,
     FreeBSD,
@@ -537,6 +538,10 @@
     return getOSVersion() < Other.getOSVersion();
   }
 
+  bool isAROS() const {
+    return getOS() == Triple::AROS;
+  }
+
   /// Comparison function for checking OS X version compatibility, which handles
   /// supporting skewed version numbering schemes used by the "darwin" triples.
   bool isMacOSXVersionLT(unsigned Major, unsigned Minor = 0,
diff -ruN llvm-20.1.0.src/lib/TargetParser/Triple.cpp llvm-20.1.0.src.aros/lib/TargetParser/Triple.cpp
--- llvm-20.1.0.src/lib/TargetParser/Triple.cpp	2025-03-04 19:51:43.000000000 +0000
+++ llvm-20.1.0.src.aros/lib/TargetParser/Triple.cpp	2025-07-15 21:39:58.441701332 +0000
@@ -282,6 +282,7 @@
   case AIX: return "aix";
   case AMDHSA: return "amdhsa";
   case AMDPAL: return "amdpal";
+  case AROS: return "aros";
   case BridgeOS: return "bridgeos";
   case CUDA: return "cuda";
   case Darwin: return "darwin";
@@ -669,6 +670,7 @@
 
 static Triple::OSType parseOS(StringRef OSName) {
   return StringSwitch<Triple::OSType>(OSName)
+    .StartsWith("aros", Triple::AROS)
     .StartsWith("darwin", Triple::Darwin)
     .StartsWith("dragonfly", Triple::DragonFly)
     .StartsWith("freebsd", Triple::FreeBSD)
