diff -ruN libcxxabi-20.1.0.src/src/cxa_demangle.cpp libcxxabi-20.1.0.src.aros/src/cxa_demangle.cpp
--- libcxxabi-20.1.0.src/src/cxa_demangle.cpp	2025-03-04 19:51:43.000000000 +0000
+++ libcxxabi-20.1.0.src.aros/src/cxa_demangle.cpp	2025-07-16 20:54:25.999073442 +0000
@@ -28,6 +28,8 @@
 
 using namespace itanium_demangle;
 
+using IDNode = itanium_demangle::Node;
+
 // <discriminator> := _ <non-negative number>      # when number < 10
 //                 := __ <non-negative number> _   # when number >= 10
 //  extension      := decimal-digit+               # at the end of string
@@ -81,7 +83,7 @@
   void print(std::string_view SV) {
     fprintf(stderr, "\"%.*s\"", (int)SV.size(), &*SV.begin());
   }
-  void print(const Node *N) {
+  void print(const IDNode *N) {
     if (N)
       N->visit(std::ref(*this));
     else
@@ -91,7 +93,7 @@
     ++Depth;
     printStr("{");
     bool First = true;
-    for (const Node *N : A) {
+    for (const IDNode *N : A) {
       if (First)
         print(N);
       else
@@ -255,23 +257,23 @@
     }
   };
 
-  template<typename NodeT> void operator()(const NodeT *Node) {
+  template<typename NodeT> void operator()(const NodeT *IDNode) {
     Depth += 2;
     fprintf(stderr, "%s(", itanium_demangle::NodeKind<NodeT>::name());
-    Node->match(CtorArgPrinter{*this});
+    IDNode->match(CtorArgPrinter{*this});
     fprintf(stderr, ")");
     Depth -= 2;
   }
 
-  void operator()(const ForwardTemplateReference *Node) {
+  void operator()(const ForwardTemplateReference *IDNode) {
     Depth += 2;
     fprintf(stderr, "ForwardTemplateReference(");
-    if (Node->Ref && !Node->Printing) {
-      Node->Printing = true;
-      CtorArgPrinter{*this}(Node->Ref);
-      Node->Printing = false;
+    if (IDNode->Ref && !IDNode->Printing) {
+      IDNode->Printing = true;
+      CtorArgPrinter{*this}(IDNode->Ref);
+      IDNode->Printing = false;
     } else {
-      CtorArgPrinter{*this}(Node->Index);
+      CtorArgPrinter{*this}(IDNode->Index);
     }
     fprintf(stderr, ")");
     Depth -= 2;
@@ -279,7 +281,7 @@
 };
 }
 
-void itanium_demangle::Node::dump() const {
+void IDNode::dump() const {
   DumpVisitor V;
   visit(std::ref(V));
   V.newLine();
@@ -356,7 +358,7 @@
   }
 
   void *allocateNodeArray(size_t sz) {
-    return Alloc.allocate(sizeof(Node *) * sz);
+    return Alloc.allocate(sizeof(IDNode *) * sz);
   }
 };
 }  // unnamed namespace
@@ -377,6 +379,10 @@
 }
 
 namespace __cxxabiv1 {
+
+// Add this alias to avoid ambiguity
+using IDNode = itanium_demangle::Node;
+
 extern "C" _LIBCXXABI_FUNC_VIS char *
 __cxa_demangle(const char *MangledName, char *Buf, size_t *N, int *Status) {
   if (MangledName == nullptr || (Buf != nullptr && N == nullptr)) {
@@ -387,7 +393,7 @@
 
   int InternalStatus = demangle_success;
   Demangler Parser(MangledName, MangledName + std::strlen(MangledName));
-  Node *AST = Parser.parse();
+  IDNode *AST = Parser.parse();
 
   if (AST == nullptr)
     InternalStatus = demangle_invalid_mangled_name;
