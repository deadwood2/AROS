diff -ruN clang-20.1.0.src/include/clang/Driver/Options.td clang-20.1.0.src.aros/include/clang/Driver/Options.td
--- clang-20.1.0.src/include/clang/Driver/Options.td	2025-03-04 19:51:43.000000000 +0000
+++ clang-20.1.0.src.aros/include/clang/Driver/Options.td	2025-07-16 02:39:36.292819560 +0000
@@ -1498,6 +1498,10 @@
   HelpText<"Path to libomptarget-nvptx bitcode library">;
 def libomptarget_spirv_bc_path_EQ : Joined<["--"], "libomptarget-spirv-bc-path=">, Group<i_Group>,
   HelpText<"Path to libomptarget-spirv bitcode library">;
+def detach : Flag<["-"], "detach">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Run in detached mode">;
 def dD : Flag<["-"], "dD">, Group<d_Group>, Visibility<[ClangOption, CC1Option]>,
   HelpText<"Print macro definitions in -E mode in addition to normal output">;
 def dI : Flag<["-"], "dI">, Group<d_Group>, Visibility<[ClangOption, CC1Option]>,
@@ -5682,6 +5686,10 @@
 def multiply__defined__unused : Separate<["-"], "multiply_defined_unused">;
 def multiply__defined : Separate<["-"], "multiply_defined">;
 def mwarn_nonportable_cfstrings : Flag<["-"], "mwarn-nonportable-cfstrings">, Group<m_Group>;
+def nix : Flag<["-"], "nix">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Enable *nix support">;
 def canonical_prefixes : Flag<["-"], "canonical-prefixes">,
   Flags<[HelpHidden]>, Visibility<[ClangOption, CLOption, DXCOption]>,
   HelpText<"Use absolute paths for invoking subcommands (default)">;
@@ -5718,11 +5726,25 @@
 def nomultidefs : Flag<["-"], "nomultidefs">;
 def nopie : Flag<["-"], "nopie">, Visibility<[ClangOption, FlangOption]>, Flags<[TargetSpecific]>; // OpenBSD
 def no_pie : Flag<["-"], "no-pie">, Visibility<[ClangOption, FlangOption]>;
+def no_posixc : Flag<["-"], "no-posixc">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Dont use POSIX C">;
+def no_stdc : Flag<["-"], "no-stdc">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Dont use STDC">;
+def no_sysbase : Flag<["-"], "no_sysbase">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Dont expose SysBase">;
+def noposixc : Flag<["-"], "noposixc">, Alias<no_posixc>;
 def noprebind : Flag<["-"], "noprebind">;
 def noprofilelib : Flag<["-"], "noprofilelib">;
 def noseglinkedit : Flag<["-"], "noseglinkedit">;
 def nostartfiles : Flag<["-"], "nostartfiles">, Group<Link_Group>;
 def startfiles : Flag<["-"], "startfiles">, Group<Link_Group>;
+def nostdc : Flag<["-"], "nostdc">, Alias<no_stdc>;
 def nostdinc : Flag<["-"], "nostdinc">,
   Visibility<[ClangOption, CLOption, DXCOption]>, Group<IncludePath_Group>,
   HelpText<"Disable both standard system #include directories and builtin #include directories">;
@@ -5739,6 +5761,7 @@
   Visibility<[ClangOption, FlangOption]>,
   Group<Link_Group>;
 def nostdlibxx : Flag<["-"], "nostdlib++">;
+def nosysbase : Flag<["-"], "nosysbase">, Alias<no_sysbase>;
 def object : Flag<["-"], "object">;
 def o : JoinedOrSeparate<["-"], "o">,
   Flags<[NoXarchOption]>,
@@ -5766,6 +5789,10 @@
   MarshallingInfoFlag<CodeGenOpts<"InstrumentForProfiling">>;
 def pipe : Flag<["-", "--"], "pipe">,
   HelpText<"Use pipes between commands, when possible">;
+def posixc : Flag<["-"], "posixc">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Enable POSIX C">;
 def prebind__all__twolevel__modules : Flag<["-"], "prebind_all_twolevel_modules">;
 def prebind : Flag<["-"], "prebind">;
 def preload : Flag<["-"], "preload">;
@@ -5833,6 +5860,10 @@
   BothFlags<[], [ClangOption, CC1Option, FlangOption, FC1Option]>>;
 def pie : Flag<["-"], "pie">, Group<Link_Group>;
 def static_pie : Flag<["-"], "static-pie">, Group<Link_Group>;
+def stdc : Flag<["-"], "stdc">,
+             Visibility<[ClangOption]>,
+             Flags<[NoArgumentUnused]>,
+             HelpText<"Enable STDC">;
 def read__only__relocs : Separate<["-"], "read_only_relocs">;
 def remap : Flag<["-"], "remap">;
 def rewrite_objc : Flag<["-"], "rewrite-objc">, Flags<[NoXarchOption]>,
diff -ruN clang-20.1.0.src/lib/Basic/Targets/OSTargets.h clang-20.1.0.src.aros/lib/Basic/Targets/OSTargets.h
--- clang-20.1.0.src/lib/Basic/Targets/OSTargets.h	2025-03-04 19:51:43.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Basic/Targets/OSTargets.h	2025-07-16 02:54:31.149422672 +0000
@@ -34,6 +34,45 @@
   }
 };
 
+// AROS target
+template <typename Target>
+class LLVM_LIBRARY_VISIBILITY AROSTargetInfo
+   : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                    MacroBuilder &Builder) const override {
+    // std defines for AROS
+    DefineStd(Builder, "AROS", Opts);
+    // defines for AmigaOS support
+    Builder.defineMacro("AMIGA");
+    Builder.defineMacro("_AMIGA");
+
+#if (0)
+    /* AROS GCC does NOT define this, so neither
+       do we. */
+    Builder.defineMacro("__AMIGA__");
+#endif
+
+    Builder.defineMacro("__ELF__");
+    if (Opts.POSIXThreads)
+      Builder.defineMacro("_REENTRANT");
+    if (Opts.CPlusPlus)
+      Builder.defineMacro("_GNU_SOURCE");
+    if (this->HasFloat128)
+      Builder.defineMacro("__FLOAT128__");
+  }
+
+public:
+  AROSTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
+      : OSTargetInfo<Target>(Triple, Opts) {
+      this->WCharType = TargetInfo::UnsignedInt;
+      this->WIntType = TargetInfo::UnsignedInt;
+#if (0)
+      CharIsSigned = false;
+#endif
+  }
+};
+
 void getAppleMachODefines(MacroBuilder &Builder, const LangOptions &Opts,
                           const llvm::Triple &Triple);
 
diff -ruN clang-20.1.0.src/lib/Basic/Targets.cpp clang-20.1.0.src.aros/lib/Basic/Targets.cpp
--- clang-20.1.0.src/lib/Basic/Targets.cpp	2025-03-04 19:51:43.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Basic/Targets.cpp	2025-07-16 03:03:29.719430143 +0000
@@ -146,6 +146,8 @@
       return std::make_unique<AppleMachOAArch64TargetInfo>(Triple, Opts);
 
     switch (os) {
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<AArch64leTargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<AArch64leTargetInfo>>(Triple,
                                                                       Opts);
@@ -184,6 +186,8 @@
 
   case llvm::Triple::aarch64_be:
     switch (os) {
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<AArch64beTargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<AArch64beTargetInfo>>(Triple,
                                                                       Opts);
@@ -215,6 +219,8 @@
       }
     case llvm::Triple::LiteOS:
       return std::make_unique<OHOSTargetInfo<ARMleTargetInfo>>(Triple, Opts);
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<ARMleTargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<ARMleTargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -253,6 +259,8 @@
     switch (os) {
     case llvm::Triple::Linux:
       return std::make_unique<LinuxTargetInfo<ARMbeTargetInfo>>(Triple, Opts);
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<ARMbeTargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
       return std::make_unique<NetBSDTargetInfo<ARMbeTargetInfo>>(Triple, Opts);
     case llvm::Triple::RTEMS:
@@ -352,6 +360,8 @@
     switch (os) {
     case llvm::Triple::Linux:
       return std::make_unique<LinuxTargetInfo<M68kTargetInfo>>(Triple, Opts);
+        case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<M68kTargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
       return std::make_unique<NetBSDTargetInfo<M68kTargetInfo>>(Triple, Opts);
     default:
@@ -362,6 +372,8 @@
     switch (os) {
     case llvm::Triple::Linux:
       return std::make_unique<LinuxTargetInfo<PPC32TargetInfo>>(Triple, Opts);
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<PPC32TargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<PPC32TargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -380,6 +392,8 @@
     switch (os) {
     case llvm::Triple::Linux:
       return std::make_unique<LinuxTargetInfo<PPC32TargetInfo>>(Triple, Opts);
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<PPC32TargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<PPC32TargetInfo>>(Triple, Opts);
     default:
@@ -392,6 +406,8 @@
       return std::make_unique<LinuxTargetInfo<PPC64TargetInfo>>(Triple, Opts);
     case llvm::Triple::Lv2:
       return std::make_unique<PS3PPUTargetInfo<PPC64TargetInfo>>(Triple, Opts);
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<PPC64TargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<PPC64TargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -408,6 +424,8 @@
     switch (os) {
     case llvm::Triple::Linux:
       return std::make_unique<LinuxTargetInfo<PPC64TargetInfo>>(Triple, Opts);
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<PPC64TargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<PPC64TargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -431,6 +449,8 @@
 
   case llvm::Triple::riscv32:
     switch (os) {
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<RISCV32TargetInfo>>(Triple, Opts);
     case llvm::Triple::NetBSD:
       return std::make_unique<NetBSDTargetInfo<RISCV32TargetInfo>>(Triple,
                                                                    Opts);
@@ -442,6 +462,8 @@
 
   case llvm::Triple::riscv64:
     switch (os) {
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<RISCV64TargetInfo>>(Triple, Opts);
     case llvm::Triple::FreeBSD:
       return std::make_unique<FreeBSDTargetInfo<RISCV64TargetInfo>>(Triple,
                                                                     Opts);
@@ -550,6 +572,9 @@
         return std::make_unique<AndroidX86_32TargetInfo>(Triple, Opts);
       }
     }
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<X86_32TargetInfo>>(Triple,
+                                                                        Opts);
     case llvm::Triple::DragonFly:
       return std::make_unique<DragonFlyBSDTargetInfo<X86_32TargetInfo>>(Triple,
                                                                         Opts);
@@ -611,6 +636,9 @@
         return std::make_unique<OHOSX86_64TargetInfo>(Triple, Opts);
       }
     }
+    case llvm::Triple::AROS:
+      return std::make_unique<AROSTargetInfo<X86_64TargetInfo>>(Triple,
+                                                                        Opts);
     case llvm::Triple::DragonFly:
       return std::make_unique<DragonFlyBSDTargetInfo<X86_64TargetInfo>>(Triple,
                                                                         Opts);
diff -ruN clang-20.1.0.src/lib/Driver/CMakeLists.txt clang-20.1.0.src.aros/lib/Driver/CMakeLists.txt
--- clang-20.1.0.src/lib/Driver/CMakeLists.txt	2025-03-04 19:51:43.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Driver/CMakeLists.txt	2025-07-15 21:48:58.051599048 +0000
@@ -45,6 +45,7 @@
   ToolChains/AMDGPU.cpp
   ToolChains/AMDGPUOpenMP.cpp
   ToolChains/AVR.cpp
+  ToolChains/AROS.cpp
   ToolChains/BareMetal.cpp
   ToolChains/Clang.cpp
   ToolChains/CommonArgs.cpp
diff -ruN clang-20.1.0.src/lib/Driver/Driver.cpp clang-20.1.0.src.aros/lib/Driver/Driver.cpp
--- clang-20.1.0.src/lib/Driver/Driver.cpp	2025-03-04 19:51:43.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Driver/Driver.cpp	2025-07-15 21:48:07.859795622 +0000
@@ -12,6 +12,7 @@
 #include "ToolChains/AMDGPUOpenMP.h"
 #include "ToolChains/AVR.h"
 #include "ToolChains/Arch/RISCV.h"
+#include "ToolChains/AROS.h"
 #include "ToolChains/BareMetal.h"
 #include "ToolChains/CSKYToolChain.h"
 #include "ToolChains/Clang.h"
@@ -6610,6 +6611,9 @@
     case llvm::Triple::AIX:
       TC = std::make_unique<toolchains::AIX>(*this, Target, Args);
       break;
+    case llvm::Triple::AROS:
+      TC = std::make_unique<toolchains::AROSClang>(*this, Target, Args);
+      break;
     case llvm::Triple::Haiku:
       TC = std::make_unique<toolchains::Haiku>(*this, Target, Args);
       break;
diff -ruN clang-20.1.0.src/lib/Driver/ToolChains/AROS.cpp clang-20.1.0.src.aros/lib/Driver/ToolChains/AROS.cpp
--- clang-20.1.0.src/lib/Driver/ToolChains/AROS.cpp	1970-01-01 00:00:00.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Driver/ToolChains/AROS.cpp	2025-07-16 19:03:04.095289709 +0000
@@ -0,0 +1,437 @@
+//===--- AROS.cpp - AROS Tool Chain -------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#include "AROS.h"
+
+#include "CommonArgs.h"
+#include "clang/Driver/InputInfo.h"
+
+//#include "Arch/ARM.h"
+//#include "Arch/PPC.h"
+//#include "Arch/RISCV.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Compilation.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/DriverDiagnostic.h"
+#include "clang/Driver/Options.h"
+#include "llvm/ADT/StringExtras.h"
+#include "llvm/Option/ArgList.h"
+#include "llvm/Support/FileSystem.h"
+#include "llvm/Support/Path.h"
+#include "llvm/Support/VirtualFileSystem.h"
+
+using namespace llvm::opt;
+using namespace clang;
+using namespace clang::driver;
+using namespace clang::driver::tools;
+using namespace clang::driver::toolchains;
+
+
+void
+AROS::Assembler::ConstructJob(Compilation &C,
+                              const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &Args,
+                              const char *LinkingOutput) const {
+    claimNoWarnArgs(Args);
+
+    const char *DefaultAssembler = "as";
+    ArgStringList CmdArgs;
+
+    switch (getToolChain().getArch()) {
+    default:
+        break;
+    case llvm::Triple::x86:
+        CmdArgs.push_back("--32");
+        break;
+    case llvm::Triple::x86_64:
+        CmdArgs.push_back("--64");
+        break;
+    }
+
+    Args.AddAllArgs(CmdArgs, options::OPT_I);
+    Args.AddAllArgValues(CmdArgs,
+                       options::OPT_Wa_COMMA,
+                       options::OPT_Xassembler);
+
+    CmdArgs.push_back("-o");
+    CmdArgs.push_back(Output.getFilename());
+
+    for (const auto &II : Inputs)
+        CmdArgs.push_back(II.getFilename());
+
+    const char *Exec = 
+        Args.MakeArgString(getToolChain().GetProgramPath(DefaultAssembler));
+    C.addCommand(std::make_unique<Command>(
+        JA, *this, ResponseFileSupport::None(), Exec, CmdArgs, Inputs));
+}
+
+static const char *getLDMOption(const llvm::Triple &T, const ArgList &Args) {
+    switch (T.getArch()) {
+    case llvm::Triple::x86:
+        return "elf_i386";
+#if (0)
+    case llvm::Triple::aarch64:
+        return "aarch64";
+    case llvm::Triple::aarch64_be:
+        return "aarch64b";
+    case llvm::Triple::arm:
+    case llvm::Triple::thumb:
+    case llvm::Triple::armeb:
+    case llvm::Triple::thumbeb:
+        return isArmBigEndian(T, Args) ? "armelfb_eabi" : "armelf_eabi";
+    case llvm::Triple::ppc:
+        return "elf32ppc";
+    case llvm::Triple::ppc64:
+        return "elf64ppc";
+    case llvm::Triple::ppc64le:
+        return "elf64lppc";
+    case llvm::Triple::riscv32:
+        return "elf32lriscv";
+    case llvm::Triple::riscv64:
+        return "elf64lriscv";
+#endif
+    case llvm::Triple::x86_64:
+        return "elf_x86_64";
+    default:
+        return nullptr;
+    }
+}
+
+void
+AROS::Linker::ConstructJob(Compilation &C,
+                           const JobAction &JA,
+                           const InputInfo &Output,
+                           const InputInfoList &Inputs,
+                           const ArgList &Args,
+                           const char *LinkingOutput) const {
+    const toolchains::AROSClang &AROSTC =
+      static_cast<const toolchains::AROSClang &>(getToolChain());
+    const char *Exec = Args.MakeArgString(AROSTC.GetLinkerPath());
+    const Driver &D = AROSTC.getDriver();
+    const std::string &SysRoot = D.SysRoot;
+    ArgStringList CmdArgs;
+    const llvm::Triple &Target = AROSTC.getTriple();
+    llvm::Triple CompilerTarget(LLVM_DEFAULT_TARGET_TRIPLE);
+
+    if (llvm::sys::path::filename(Exec) == "lld") {
+        CmdArgs.push_back("-flavor");
+        CmdArgs.push_back("gnu");
+        if (!D.SysRoot.empty())
+            CmdArgs.push_back(Args.MakeArgString("--sysroot=" + SysRoot));
+    }
+
+    if (!Args.hasArg(options::OPT_static)) {
+        CmdArgs.push_back("--eh-frame-hdr");
+    }
+    
+    if (const char *LDMOption = getLDMOption(Target, Args)) {
+        CmdArgs.push_back("-m");
+        CmdArgs.push_back(LDMOption);
+    } else {
+#if (0)
+        D.Diag(diag::err_target_unknown_triple) << Triple.str();
+        return;
+#endif
+    }
+
+    if (Output.isFilename()) {
+        CmdArgs.push_back("-o");
+        CmdArgs.push_back(Output.getFilename());
+    } else {
+         assert(Output.isNothing() && "Invalid output.");
+    }
+
+    AROSTC.addStartObjectFileArgs(Args, CmdArgs);
+
+  Args.addAllArgs(CmdArgs, {options::OPT_L, options::OPT_T_Group,
+                            options::OPT_s, options::OPT_t, options::OPT_r});
+
+    AddLinkerInputs(AROSTC, Inputs, Args, CmdArgs, JA);
+
+    if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
+        bool jobWantsPThread;
+        if ((jobWantsPThread = AROSTC.ShouldLinkCXXStdlib(Args))) {
+            AROSTC.AddCXXStdlibLibArgs(Args, CmdArgs);
+        }
+
+        SmallString<128> LibPath(SysRoot);
+        if (Target.isArch32Bit() && CompilerTarget.isArch64Bit()) {
+            llvm::sys::path::append(LibPath, "lib32");
+        } else {
+            llvm::sys::path::append(LibPath, "lib");
+        }
+
+        CmdArgs.push_back(Args.MakeArgString(StringRef("-L") + LibPath));
+
+        CmdArgs.push_back("--start-group");
+        if ((jobWantsPThread) ||
+           (Args.hasArg(options::OPT_pthreads, options::OPT_pthread))) {
+            CmdArgs.push_back("-lpthread");
+        }
+        CmdArgs.push_back("-lmui");
+        CmdArgs.push_back("-larossupport");
+        CmdArgs.push_back("-lamiga");
+        if (!Args.hasArg(options::OPT_nostartfiles)) {
+            if (!Args.hasArg(options::OPT_static)) {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    if (!Args.hasArg(options::OPT_no_posixc)) {
+                        CmdArgs.push_back("-lposixc");
+                    }
+
+                    CmdArgs.push_back("-lstdcio");
+                    CmdArgs.push_back("-lstdc");
+                }// OPT_no_stdc endif
+            } else {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc.static");
+                }
+            }// OPT_static endif
+        }// OPT_nostartfiles endif
+        CmdArgs.push_back("-lcodesets");
+        CmdArgs.push_back("-lkeymap");
+        CmdArgs.push_back("-lexpansion");
+        CmdArgs.push_back("-lcommodities");
+        CmdArgs.push_back("-ldiskfont");
+        CmdArgs.push_back("-lasl");
+        CmdArgs.push_back("-lmuimaster");
+        CmdArgs.push_back("-ldatatypes");
+        CmdArgs.push_back("-lcybergraphics");
+        CmdArgs.push_back("-lworkbench");
+        CmdArgs.push_back("-licon");
+        CmdArgs.push_back("-lintuition");
+        CmdArgs.push_back("-lgadtools");
+        CmdArgs.push_back("-llayers");
+        CmdArgs.push_back("-laros");
+        CmdArgs.push_back("-lpartition");
+        CmdArgs.push_back("-liffparse");
+        CmdArgs.push_back("-lgraphics");
+        CmdArgs.push_back("-llocale");
+        CmdArgs.push_back("-ldos");
+        CmdArgs.push_back("-lutility");
+        CmdArgs.push_back("-loop");
+        if (!Args.hasArg(options::OPT_nosysbase)) {
+            CmdArgs.push_back("-lexec");
+        }
+        CmdArgs.push_back("-lautoinit");
+        CmdArgs.push_back("-llibinit");
+        if (Args.hasArg(options::OPT_nostartfiles)) {
+            if (!Args.hasArg(options::OPT_static)) {
+                if (!Args.hasArg(options::OPT_no_posixc)) {
+                    CmdArgs.push_back("-lposixc");
+                }
+                CmdArgs.push_back("-lstdcio");
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc");
+                }
+            }
+            else
+            {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc.static");
+                }
+            }
+        }// 2nd OPT_nostartfiles endif
+        CmdArgs.push_back("--end-group");
+    }
+
+    C.addCommand(std::make_unique<Command>(
+        JA, *this, ResponseFileSupport::AtFileUTF8(),
+        Exec, CmdArgs, Inputs));
+}
+
+
+//------------------------------------------------------------------------------------------------------//
+
+
+AROSClang::AROSClang(const Driver &D,
+                             const llvm::Triple &Triple,
+                             const llvm::opt::ArgList &Args)
+    : Generic_ELF(D, Triple, Args) {
+    if (GetCXXStdlibType(Args) == ToolChain::CST_Libstdcxx) {
+
+    }
+}
+
+#if (0)
+bool AROSClang::IsUnwindTablesDefault() const {
+    // FIXME:
+
+    // all non-x86 targets need unwind tables, however,
+    // LLVM currently does not know how to emit them.
+
+    // FIXME:
+    // Is this the correct implementation of this function ???
+//  bool AROSClang::IsUnwindTablesDefault(const ArgList &Args) const {
+    //// Unwind tables are not emitted if -fno-exceptions
+    //// is supplied (except when targeting x86_64).
+    //return getArch() == llvm::Triple::x86_64 ||
+    //    (GetExceptionModel(Args) != llvm::ExceptionHandling::SjLj &&
+    //    Args.hasFlag(options::OPT_fexceptions,
+    //                 options::OPT_fno_exceptions,
+    //                 true));
+
+    return getArch() == llvm::Triple::x86_64;
+}
+#endif
+
+void AROSClang::
+AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                         llvm::opt::ArgStringList &CC1Args) const {
+    const Driver &D = getDriver();
+    const std::string &SysRoot = D.SysRoot;
+
+    if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+        addSystemInclude(DriverArgs, CC1Args, SysRoot + "/include");
+        if (!DriverArgs.hasArg(options::OPT_no_posixc)) {
+            SmallString<128> ResourceDir(SysRoot);
+            llvm::sys::path::append(ResourceDir, "include/aros/posixc");
+            addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+        }// OPT_no_posixc
+        if (!DriverArgs.hasArg(options::OPT_no_stdc)) {
+            SmallString<128> ResourceDir(SysRoot);
+            llvm::sys::path::append(ResourceDir, "include/aros/stdc");
+            addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+        }// OPT_no_stdc
+    }// OPT_nobuiltininc
+}
+
+void AROSClang::
+AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                          llvm::opt::ArgStringList &CC1Args) const {
+    if (DriverArgs.hasArg(options::OPT_nostdinc))
+        return;
+
+    if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+        SmallString<128> Dir(getDriver().ResourceDir);
+        llvm::sys::path::append(Dir, "include");
+        addSystemInclude(DriverArgs, CC1Args, Dir.str());
+    }
+
+    if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+        return;
+
+    if (std::optional<std::string> Path = getStdlibIncludePath())
+        addSystemInclude(DriverArgs, CC1Args, *Path);
+
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+}
+
+void AROSClang::
+addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                      llvm::opt::ArgStringList &CC1Args,
+                      Action::OffloadKind DeviceOffloadingKind) const {
+    if (DriverArgs.hasArg(options::OPT_posixc)) {
+        CC1Args.push_back("-D_POSIX_SOURCE");
+    }
+    if (DriverArgs.hasArg(options::OPT_nix)) {
+        CC1Args.push_back("-D__NIX__");
+    }
+}
+
+
+bool AROSClang::handlesTarget(const llvm::Triple &Triple) {
+  if (Triple.getOS() != llvm::Triple::AROS)
+    return false;
+  return Triple.getEnvironmentName() == "elf";
+}
+
+void AROSClang::
+AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const {
+    if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+        DriverArgs.hasArg(options::OPT_nostdincxx))
+        return;
+
+    SmallString<128> ClangBinDir(getDriver().Dir);
+    switch (GetCXXStdlibType(DriverArgs)) {
+    case ToolChain::CST_Libcxx: {
+        SmallString<128> Dir(ClangBinDir);
+        llvm::sys::path::append(Dir, "..", "include", "c++", "v1");
+        llvm::sys::fs::make_absolute(Dir);
+        llvm::sys::path::remove_dots(Dir, /*remove_dot_dot=*/true);
+        addSystemInclude(DriverArgs, CC1Args, Dir.str());
+        break;
+    }
+    case ToolChain::CST_Libstdcxx:
+        break;
+    }
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+}
+
+void AROSClang::
+AddCXXStdlibLibArgs(const llvm::opt::ArgList &DriverArgs,
+                    llvm::opt::ArgStringList &CC1Args) const {
+    SmallString<128> ClangBinDir(getDriver().Dir);
+    switch (GetCXXStdlibType(DriverArgs)) {
+    case ToolChain::CST_Libcxx: {
+        SmallString<128> Dir(ClangBinDir);
+        llvm::sys::path::append(Dir, "..", "lib");
+        llvm::sys::fs::make_absolute(Dir);
+        llvm::sys::path::remove_dots(Dir, /*remove_dot_dot=*/true);
+        CC1Args.push_back(DriverArgs.MakeArgString("-L" + Dir));
+        CC1Args.push_back("-lc++");
+        CC1Args.push_back("-lc++abi");
+        CC1Args.push_back("-lunwind");
+        break;
+    }
+    case ToolChain::CST_Libstdcxx:
+        CC1Args.push_back("-lstdc++");
+        break;
+    }
+}
+
+void AROSClang::
+addStartObjectFileArgs(const llvm::opt::ArgList &Args,
+                       llvm::opt::ArgStringList &CmdArgs) const {
+    const Driver &D = getDriver();
+
+   /* we need to provide cxx-startup.o, for c++ code,
+    * even when no startfiles is specified
+    */
+    if (!D.CCCIsCXX() && Args.hasArg(options::OPT_nostartfiles))
+        return;
+
+    const std::string &SysRoot = D.SysRoot;
+    SmallString<128> LibPath(SysRoot);
+    const llvm::Triple &Target = getTriple();
+    llvm::Triple CompilerTarget(LLVM_DEFAULT_TARGET_TRIPLE);
+    SmallString<10> tgtPath("lib/");
+    if (Target.isArch32Bit() && CompilerTarget.isArch64Bit()) {
+        SmallString<128> TstLibPath(LibPath);
+        llvm::sys::path::append(TstLibPath, "lib32/");
+        if (getVFS().exists(TstLibPath))
+            tgtPath.assign("lib32/");
+    }
+    llvm::sys::path::append(LibPath, tgtPath);
+
+    if (!Args.hasArg(options::OPT_nostartfiles)) {
+        // Standard AROS/AmigaOS-like startfiles.
+        CmdArgs.push_back(Args.MakeArgString(LibPath + "startup.o"));
+        if (Args.hasArg(options::OPT_detach)) {
+            CmdArgs.push_back(Args.MakeArgString(LibPath + "detach.o"));
+        }
+    }
+    // cxx-startup.o for __dso_handle
+    CmdArgs.push_back(Args.MakeArgString(LibPath + "cxx-startup.o"));
+    if (!Args.hasArg(options::OPT_nostartfiles) && Args.hasArg(options::OPT_nix)) {
+        // *nix support startfiles.
+        CmdArgs.push_back(Args.MakeArgString(LibPath + "nixmain.o"));
+    }
+}
+
+
+Tool *AROSClang::buildAssembler() const {
+    return new tools::AROS::Assembler(*this);
+}
+
+Tool *AROSClang::buildLinker() const {
+    return new tools::AROS::Linker(*this);
+}
diff -ruN clang-20.1.0.src/lib/Driver/ToolChains/AROS.h clang-20.1.0.src.aros/lib/Driver/ToolChains/AROS.h
--- clang-20.1.0.src/lib/Driver/ToolChains/AROS.h	1970-01-01 00:00:00.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Driver/ToolChains/AROS.h	2025-07-16 10:20:52.784100568 +0000
@@ -0,0 +1,118 @@
+//===--- AROS.h - AROS ToolChain Implementations ----------*- C -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
+
+#include "Gnu.h"
+#include "clang/Driver/Tool.h"
+#include "clang/Driver/ToolChain.h"
+#include "llvm/Config/llvm-config.h" // for LLVM_DEFAULT_TARGET_TRIPLE
+
+namespace clang {
+namespace driver {
+namespace tools {
+
+/// AROS -- Directly call GNU Binutils assembler and linker
+namespace AROS {
+class LLVM_LIBRARY_VISIBILITY Assembler : public Tool {
+public:
+  Assembler(const ToolChain &TC)
+      : Tool("AROS::Assembler", "assembler", TC) {}
+
+  bool hasIntegratedCPP() const override { return false; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+class LLVM_LIBRARY_VISIBILITY Linker : public Tool {
+public:
+  Linker(const ToolChain &TC)
+      : Tool("AROS::Linker", "linker", TC) {}
+  bool isLinkJob() const override { return true; }
+  bool hasIntegratedCPP() const override { return false; }
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+} // end namespace AROS
+} // end namespace tools
+
+namespace toolchains {
+class LLVM_LIBRARY_VISIBILITY AROSClang : public Generic_ELF {
+public:
+  AROSClang(const Driver &D,
+                const llvm::Triple &Triple,
+                const llvm::opt::ArgList &Args);
+  ~AROSClang() override = default;
+
+  static bool handlesTarget(const llvm::Triple &Triple);
+
+  bool isPICDefault() const override { return false; }
+  bool isPIEDefault(const llvm::opt::ArgList &Args) const override {
+    return false;
+  }
+  bool isPICDefaultForced() const override { return false; }
+  bool SupportsProfiling() const override { return false; }
+
+  void AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+
+  void addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args,
+                             Action::OffloadKind DeviceOffloadKind) const override;
+
+  void AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const override;
+
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args,
+                           llvm::opt::ArgStringList &CmdArgs) const override;
+
+  void addStartObjectFileArgs(const llvm::opt::ArgList &Args,
+                              llvm::opt::ArgStringList &CmdArgs) const;
+
+  RuntimeLibType GetDefaultRuntimeLibType() const override {
+    return ToolChain::RLT_CompilerRT;
+  }
+
+  CXXStdlibType GetDefaultCXXStdlibType() const override {
+    return ToolChain::CST_Libcxx;
+  }
+
+  const char *getDefaultLinker() const override {
+    const llvm::Triple &Target = getTriple();
+    llvm::Triple CompilerTarget(LLVM_DEFAULT_TARGET_TRIPLE);
+
+    if (Target.isArch32Bit() && CompilerTarget.isArch64Bit())
+      return "collect-aros32";
+
+    return "collect-aros";
+  }
+private:
+  void AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const;
+
+  std::string SysRoot;
+
+protected:
+  Tool *buildAssembler() const override;
+  Tool *buildLinker() const override;
+};
+
+
+} // end namespace toolchains
+} // end namespace driver
+} // end namespace clang
+
+#endif // LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
diff -ruN clang-20.1.0.src/lib/Lex/InitHeaderSearch.cpp clang-20.1.0.src.aros/lib/Lex/InitHeaderSearch.cpp
--- clang-20.1.0.src/lib/Lex/InitHeaderSearch.cpp	2025-03-04 19:51:43.000000000 +0000
+++ clang-20.1.0.src.aros/lib/Lex/InitHeaderSearch.cpp	2025-07-15 22:12:22.074124334 +0000
@@ -284,6 +284,7 @@
 bool InitHeaderSearch::ShouldAddDefaultIncludePaths(
     const llvm::Triple &triple) {
   switch (triple.getOS()) {
+  case llvm::Triple::AROS:
   case llvm::Triple::AIX:
   case llvm::Triple::DragonFly:
   case llvm::Triple::ELFIAMCU:
