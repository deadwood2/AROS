diff -ruN clang-11.0.0.src/include/clang/Driver/Options.td clang-11.0.0.src.aros/include/clang/Driver/Options.td
--- clang-11.0.0.src/include/clang/Driver/Options.td	2020-10-07 10:10:48.000000000 +0000
+++ clang-11.0.0.src.aros/include/clang/Driver/Options.td	2025-06-26 12:47:36.147031156 +0000
@@ -668,6 +668,7 @@
   HelpText<"Filename to write DOT-formatted header dependencies to">;
 def module_dependency_dir : Separate<["-"], "module-dependency-dir">,
   Flags<[CC1Option]>, HelpText<"Directory to dump module dependencies to">;
+def detach : Flag<["-"], "detach">, Flags<[DriverOption,NoArgumentUnused]>;
 def dumpmachine : Flag<["-"], "dumpmachine">;
 def dumpspecs : Flag<["-"], "dumpspecs">, Flags<[Unsupported]>;
 def dumpversion : Flag<["-"], "dumpversion">;
@@ -2690,11 +2691,15 @@
 def multiply__defined__unused : Separate<["-"], "multiply_defined_unused">;
 def multiply__defined : Separate<["-"], "multiply_defined">;
 def mwarn_nonportable_cfstrings : Flag<["-"], "mwarn-nonportable-cfstrings">, Group<m_Group>;
+def nix : Flag<["-"], "nix">, Flags<[DriverOption,NoArgumentUnused]>;
 def no_canonical_prefixes : Flag<["-"], "no-canonical-prefixes">, Flags<[HelpHidden, CoreOption]>,
   HelpText<"Use relative instead of canonical paths">;
 def no_cpp_precomp : Flag<["-"], "no-cpp-precomp">, Group<clang_ignored_f_Group>;
 def no_integrated_cpp : Flag<["-", "--"], "no-integrated-cpp">, Flags<[DriverOption]>;
 def no_pedantic : Flag<["-", "--"], "no-pedantic">, Group<pedantic_Group>;
+def no_posixc : Flag<["-"], "no-posixc">, Flags<[DriverOption,NoArgumentUnused]>;
+def no_stdc : Flag<["-"], "no-stdc">, Flags<[DriverOption,NoArgumentUnused]>;
+def no_sysbase : Flag<["-"], "no_sysbase">, Flags<[DriverOption,NoArgumentUnused]>;
 def no__dead__strip__inits__and__terms : Flag<["-"], "no_dead_strip_inits_and_terms">;
 def nobuiltininc : Flag<["-"], "nobuiltininc">, Flags<[CC1Option, CoreOption]>,
   HelpText<"Disable builtin #include directories">;
@@ -2709,16 +2714,19 @@
 def nomultidefs : Flag<["-"], "nomultidefs">;
 def nopie : Flag<["-"], "nopie">;
 def no_pie : Flag<["-"], "no-pie">, Alias<nopie>;
+def noposixc : Flag<["-"], "noposixc">, Alias<no_posixc>;
 def noprebind : Flag<["-"], "noprebind">;
 def noprofilelib : Flag<["-"], "noprofilelib">;
 def noseglinkedit : Flag<["-"], "noseglinkedit">;
 def nostartfiles : Flag<["-"], "nostartfiles">;
+def nostdc : Flag<["-"], "nostdc">, Alias<no_stdc>;
 def nostdinc : Flag<["-"], "nostdinc">, Flags<[CoreOption]>;
 def nostdlibinc : Flag<["-"], "nostdlibinc">;
 def nostdincxx : Flag<["-"], "nostdinc++">, Flags<[CC1Option]>,
   HelpText<"Disable standard #include directories for the C++ standard library">;
 def nostdlib : Flag<["-"], "nostdlib">;
 def nostdlibxx : Flag<["-"], "nostdlib++">;
+def nosysbase : Flag<["-"], "nosysbase">, Alias<no_sysbase>;
 def object : Flag<["-"], "object">;
 def o : JoinedOrSeparate<["-"], "o">, Flags<[DriverOption, RenderAsInput, CC1Option, CC1AsOption]>,
   HelpText<"Write output to <file>">, MetaVarName<"<file>">;
@@ -2729,6 +2737,7 @@
 def pg : Flag<["-"], "pg">, HelpText<"Enable mcount instrumentation">, Flags<[CC1Option]>;
 def pipe : Flag<["-", "--"], "pipe">,
   HelpText<"Use pipes between commands, when possible">;
+def posixc : Flag<["-"], "posixc">, Flags<[DriverOption,NoArgumentUnused]>;
 def prebind__all__twolevel__modules : Flag<["-"], "prebind_all_twolevel_modules">;
 def prebind : Flag<["-"], "prebind">;
 def preload : Flag<["-"], "preload">;
@@ -2818,6 +2827,7 @@
 def static_libgcc : Flag<["-"], "static-libgcc">;
 def static_libstdcxx : Flag<["-"], "static-libstdc++">;
 def static : Flag<["-", "--"], "static">, Flags<[NoArgumentUnused]>;
+def stdc : Flag<["-"], "stdc">, Flags<[DriverOption,NoArgumentUnused]>;
 def std_default_EQ : Joined<["-"], "std-default=">;
 def std_EQ : Joined<["-", "--"], "std=">, Flags<[CC1Option]>,
   Group<CompileOnly_Group>, HelpText<"Language standard to compile for">,
diff -ruN clang-11.0.0.src/lib/Basic/Targets/OSTargets.h clang-11.0.0.src.aros/lib/Basic/Targets/OSTargets.h
--- clang-11.0.0.src/lib/Basic/Targets/OSTargets.h	2020-10-07 10:10:48.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Basic/Targets/OSTargets.h	2025-07-11 10:54:33.575958710 +0000
@@ -71,6 +71,42 @@
       : OSTargetInfo<Target>(Triple, Opts) {}
 };
 
+// AROS target
+template <typename Target>
+class LLVM_LIBRARY_VISIBILITY AROSTargetInfo : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                    MacroBuilder &Builder) const override {
+    // std defines for AROS
+    DefineStd(Builder, "AROS", Opts);
+    // defines for AmigaOS support
+    Builder.defineMacro("AMIGA");
+    Builder.defineMacro("_AMIGA");
+
+#if (0)
+    /* AROS GCC does NOT define this, so neither
+       do we. */
+    Builder.defineMacro("__AMIGA__");
+#endif
+
+    Builder.defineMacro("__ELF__");
+    if (Opts.POSIXThreads)
+      Builder.defineMacro("_REENTRANT");
+    if (Opts.CPlusPlus)
+      Builder.defineMacro("_GNU_SOURCE");
+  }
+
+public:
+  AROSTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
+      : OSTargetInfo<Target>(Triple, Opts) {
+      this->WCharType = TargetInfo::UnsignedInt;
+      this->WIntType = TargetInfo::UnsignedInt;
+#if (0)
+      CharIsSigned = false;
+#endif
+  }
+};
+
 void getDarwinDefines(MacroBuilder &Builder, const LangOptions &Opts,
                       const llvm::Triple &Triple, StringRef &PlatformName,
                       VersionTuple &PlatformMinVersion);
diff -ruN clang-11.0.0.src/lib/Basic/Targets.cpp clang-11.0.0.src.aros/lib/Basic/Targets.cpp
--- clang-11.0.0.src/lib/Basic/Targets.cpp	2020-10-07 10:10:48.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Basic/Targets.cpp	2025-06-26 12:47:36.147031156 +0000
@@ -136,6 +136,11 @@
       return new DarwinAArch64TargetInfo(Triple, Opts);
 
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS AArch64
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -180,6 +185,11 @@
       return new DarwinARMTargetInfo(Triple, Opts);
 
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS ARMle
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<ARMleTargetInfo>(Triple, Opts);
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<ARMleTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
@@ -216,6 +226,11 @@
       return new DarwinARMTargetInfo(Triple, Opts);
 
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS ARMbe
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<ARMbeTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<ARMbeTargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -318,6 +333,11 @@
     if (Triple.isOSDarwin())
       return new DarwinPPC32TargetInfo(Triple, Opts);
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS PPC32
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<PPC32TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<PPC32TargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -338,6 +358,11 @@
     if (Triple.isOSDarwin())
       return new DarwinPPC64TargetInfo(Triple, Opts);
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS PPC64
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<PPC64TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<PPC64TargetInfo>(Triple, Opts);
     case llvm::Triple::Lv2:
@@ -465,6 +490,11 @@
     switch (os) {
     case llvm::Triple::Ananas:
       return new AnanasTargetInfo<X86_32TargetInfo>(Triple, Opts);
+    //  FIXME:
+    //  Needs to be tested!!!
+    // New Target AROS X86_32
+    case llvm::Triple::AROS:
+      return new AROSTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux: {
@@ -524,6 +554,11 @@
     switch (os) {
     case llvm::Triple::Ananas:
       return new AnanasTargetInfo<X86_64TargetInfo>(Triple, Opts);
+    //  FIXME:
+    //  Needs to be tested!!!
+    //  New Target AROS X86_64
+    case llvm::Triple::AROS:
+      return new AROSTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux: {
diff -ruN clang-11.0.0.src/lib/Driver/CMakeLists.txt clang-11.0.0.src.aros/lib/Driver/CMakeLists.txt
--- clang-11.0.0.src/lib/Driver/CMakeLists.txt	2020-10-07 10:10:48.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Driver/CMakeLists.txt	2025-06-26 12:47:36.147031156 +0000
@@ -36,6 +36,7 @@
   ToolChains/AIX.cpp
   ToolChains/Ananas.cpp
   ToolChains/AMDGPU.cpp
+  ToolChains/AROS.cpp
   ToolChains/AVR.cpp
   ToolChains/BareMetal.cpp
   ToolChains/Clang.cpp
diff -ruN clang-11.0.0.src/lib/Driver/Driver.cpp clang-11.0.0.src.aros/lib/Driver/Driver.cpp
--- clang-11.0.0.src/lib/Driver/Driver.cpp	2020-10-07 10:10:48.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Driver/Driver.cpp	2025-06-26 12:47:36.151031247 +0000
@@ -10,6 +10,7 @@
 #include "InputInfo.h"
 #include "ToolChains/AIX.h"
 #include "ToolChains/AMDGPU.h"
+#include "ToolChains/AROS.h"
 #include "ToolChains/AVR.h"
 #include "ToolChains/Ananas.h"
 #include "ToolChains/BareMetal.h"
@@ -4897,6 +4898,9 @@
     case llvm::Triple::Ananas:
       TC = std::make_unique<toolchains::Ananas>(*this, Target, Args);
       break;
+    case llvm::Triple::AROS:
+      TC = std::make_unique<toolchains::AROSToolChain>(*this, Target, Args);
+      break;
     case llvm::Triple::CloudABI:
       TC = std::make_unique<toolchains::CloudABI>(*this, Target, Args);
       break;
diff -ruN clang-11.0.0.src/lib/Driver/ToolChains/AROS.cpp clang-11.0.0.src.aros/lib/Driver/ToolChains/AROS.cpp
--- clang-11.0.0.src/lib/Driver/ToolChains/AROS.cpp	1970-01-01 00:00:00.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Driver/ToolChains/AROS.cpp	2025-07-11 14:49:09.235957170 +0000
@@ -0,0 +1,403 @@
+//===--- AROS.cpp - AROS Tool Chain -------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#include "AROS.h"
+//#include "Arch/ARM.h"
+//#include "Arch/PPC.h"
+//#include "Arch/RISCV.h"
+#include "InputInfo.h"
+#include "CommonArgs.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Compilation.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/DriverDiagnostic.h"
+#include "clang/Driver/Options.h"
+#include "llvm/Option/ArgList.h"
+#include "llvm/Support/FileSystem.h"
+#include "llvm/Support/Path.h"
+#include "llvm/Support/VirtualFileSystem.h"
+
+using namespace clang::driver;
+using namespace clang::driver::tools;
+using namespace clang::driver::toolchains;
+using namespace clang;
+using namespace llvm::opt;
+
+
+void
+AROS::Assembler::ConstructJob(Compilation &C,
+                              const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &Args,
+                              const char *LinkingOutput) const {
+    claimNoWarnArgs(Args);
+    ArgStringList CmdArgs;
+
+    Args.AddAllArgValues(CmdArgs,
+                       options::OPT_Wa_COMMA,
+                       options::OPT_Xassembler);
+
+    CmdArgs.push_back("-o");
+    CmdArgs.push_back(Output.getFilename());
+
+    for (const auto &II : Inputs)
+        CmdArgs.push_back(II.getFilename());
+
+    const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("as"));
+    C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::None(), Exec, CmdArgs, Inputs));
+}
+
+static const char *getLDMOption(const llvm::Triple &T, const ArgList &Args) {
+    switch (T.getArch()) {
+    case llvm::Triple::x86:
+        return "elf_i386";
+#if (0)
+    case llvm::Triple::aarch64:
+        return "aarch64";
+    case llvm::Triple::aarch64_be:
+        return "aarch64b";
+    case llvm::Triple::arm:
+    case llvm::Triple::thumb:
+    case llvm::Triple::armeb:
+    case llvm::Triple::thumbeb:
+        return isArmBigEndian(T, Args) ? "armelfb_eabi" : "armelf_eabi";
+    case llvm::Triple::ppc:
+        return "elf32ppc";
+    case llvm::Triple::ppc64:
+        return "elf64ppc";
+    case llvm::Triple::ppc64le:
+        return "elf64lppc";
+    case llvm::Triple::riscv32:
+        return "elf32lriscv";
+    case llvm::Triple::riscv64:
+        return "elf64lriscv";
+#endif
+    case llvm::Triple::x86_64:
+        return "elf_x86_64";
+    default:
+        return nullptr;
+    }
+}
+
+void
+AROS::Linker::ConstructJob(Compilation &C,
+                           const JobAction &JA,
+                           const InputInfo &Output,
+                           const InputInfoList &Inputs,
+                           const ArgList &Args,
+                           const char *LinkingOutput) const {
+    const toolchains::AROSToolChain &AROSTC =
+      static_cast<const toolchains::AROSToolChain &>(getToolChain());
+    const char *Exec = Args.MakeArgString(AROSTC.GetLinkerPath());
+    const Driver &D = AROSTC.getDriver();
+    const std::string &SysRoot = D.SysRoot;
+    ArgStringList CmdArgs;
+    const llvm::Triple &Target = AROSTC.getTriple();
+    llvm::Triple CompilerTarget(LLVM_DEFAULT_TARGET_TRIPLE);
+
+    if (llvm::sys::path::filename(Exec) == "lld") {
+        CmdArgs.push_back("-flavor");
+        CmdArgs.push_back("gnu");
+        if (!D.SysRoot.empty())
+            CmdArgs.push_back(Args.MakeArgString("--sysroot=" + SysRoot));
+    }
+
+#if (0)
+    if (!Args.hasArg(options::OPT_static)) {
+        CmdArgs.push_back("--eh-frame-hdr");
+    }
+#endif
+
+    if (const char *LDMOption = getLDMOption(Target, Args)) {
+        CmdArgs.push_back("-m");
+        CmdArgs.push_back(LDMOption);
+    } else {
+#if (0)
+        D.Diag(diag::err_target_unknown_triple) << Triple.str();
+        return;
+#endif
+    }
+
+    if (Output.isFilename()) {
+        CmdArgs.push_back("-o");
+        CmdArgs.push_back(Output.getFilename());
+    } else {
+         assert(Output.isNothing() && "Invalid output.");
+    }
+
+    AROSTC.addStartObjectFileArgs(Args, CmdArgs);
+
+    Args.AddAllArgs(CmdArgs,
+                  {options::OPT_L,
+                   options::OPT_T_Group,
+                   options::OPT_e});
+
+    AddLinkerInputs(AROSTC, Inputs, Args, CmdArgs, JA);
+
+    if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
+        SmallString<128> LibPath(SysRoot);
+
+        if (Target.isArch32Bit() && CompilerTarget.isArch64Bit()) {
+            llvm::sys::path::append(LibPath, "lib32");
+        } else {
+            llvm::sys::path::append(LibPath, "lib");
+        }
+
+        CmdArgs.push_back(Args.MakeArgString(StringRef("-L") + LibPath));
+
+        if (D.CCCIsCXX()) {
+            AROSTC.AddCXXStdlibLibArgs(Args, CmdArgs);
+        }
+        CmdArgs.push_back("--start-group");
+        if (D.CCCIsCXX()) {
+            CmdArgs.push_back("-lpthread");
+        }
+        CmdArgs.push_back("-lmui");
+        CmdArgs.push_back("-larossupport");
+        CmdArgs.push_back("-lamiga");
+        if (!Args.hasArg(options::OPT_nostartfiles)) {
+            if (!Args.hasArg(options::OPT_static)) {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    if (!Args.hasArg(options::OPT_no_posixc)) {
+                        CmdArgs.push_back("-lposixc");
+                    }
+
+                    CmdArgs.push_back("-lstdcio");
+                    CmdArgs.push_back("-lstdc");
+                }// OPT_no_stdc endif
+            } else {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc.static");
+                }
+            }// OPT_static endif
+        }// OPT_nostartfiles endif
+        CmdArgs.push_back("-lcodesets");
+        CmdArgs.push_back("-lkeymap");
+        CmdArgs.push_back("-lexpansion");
+        CmdArgs.push_back("-lcommodities");
+        CmdArgs.push_back("-ldiskfont");
+        CmdArgs.push_back("-lasl");
+        CmdArgs.push_back("-lmuimaster");
+        CmdArgs.push_back("-ldatatypes");
+        CmdArgs.push_back("-lcybergraphics");
+        CmdArgs.push_back("-lworkbench");
+        CmdArgs.push_back("-licon");
+        CmdArgs.push_back("-lintuition");
+        CmdArgs.push_back("-lgadtools");
+        CmdArgs.push_back("-llayers");
+        CmdArgs.push_back("-laros");
+        CmdArgs.push_back("-lpartition");
+        CmdArgs.push_back("-liffparse");
+        CmdArgs.push_back("-lgraphics");
+        CmdArgs.push_back("-llocale");
+        CmdArgs.push_back("-ldos");
+        CmdArgs.push_back("-lutility");
+        CmdArgs.push_back("-loop");
+        if (!Args.hasArg(options::OPT_nosysbase)) {
+            CmdArgs.push_back("-lexec");
+        }
+        CmdArgs.push_back("-lautoinit");
+        CmdArgs.push_back("-llibinit");
+        if (Args.hasArg(options::OPT_nostartfiles)) {
+            if (!Args.hasArg(options::OPT_static)) {
+                if (!Args.hasArg(options::OPT_no_posixc)) {
+                    CmdArgs.push_back("-lposixc");
+                }
+                CmdArgs.push_back("-lstdcio");
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc");
+                }
+            }
+            else
+            {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc.static");
+                }
+            }
+        }// 2nd OPT_nostartfiles endif
+        CmdArgs.push_back("--end-group");
+    }
+
+    C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::AtFileUTF8(), Exec, CmdArgs, Inputs));
+}
+
+
+//------------------------------------------------------------------------------------------------------//
+
+
+AROSToolChain::AROSToolChain(const Driver &D,
+                             const llvm::Triple &Triple,
+                             const llvm::opt::ArgList &Args)
+    : Generic_ELF(D, Triple, Args) {
+    if (GetCXXStdlibType(Args) == ToolChain::CST_Libstdcxx) {
+
+    }
+}
+
+#if (0)
+bool AROSToolChain::IsUnwindTablesDefault() const {
+    // FIXME:
+
+    // all non-x86 targets need unwind tables, however,
+    // LLVM currently does not know how to emit them.
+
+    // FIXME:
+    // Is this the correct implementation of this function ???
+//  bool AROSToolChain::IsUnwindTablesDefault(const ArgList &Args) const {
+    //// Unwind tables are not emitted if -fno-exceptions
+    //// is supplied (except when targeting x86_64).
+    //return getArch() == llvm::Triple::x86_64 ||
+    //    (GetExceptionModel(Args) != llvm::ExceptionHandling::SjLj &&
+    //    Args.hasFlag(options::OPT_fexceptions,
+    //                 options::OPT_fno_exceptions,
+    //                 true));
+
+    return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPICDefault() const {
+    return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPIEDefault() const {
+    return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPICDefaultForced() const {
+    return getArch() == llvm::Triple::x86_64;
+}
+#endif
+
+void AROSToolChain::
+AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                         llvm::opt::ArgStringList &CC1Args) const {
+    const Driver &D = getDriver();
+    const std::string &SysRoot = D.SysRoot;
+
+    if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+        addSystemInclude(DriverArgs, CC1Args, SysRoot + "/include");
+        if (!DriverArgs.hasArg(options::OPT_no_posixc)) {
+            SmallString<128> ResourceDir(SysRoot);
+            llvm::sys::path::append(ResourceDir, "include/aros/posixc");
+            addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+        }// OPT_no_posixc endif
+        if (!DriverArgs.hasArg(options::OPT_no_stdc)) {
+            SmallString<128> ResourceDir(SysRoot);
+            llvm::sys::path::append(ResourceDir, "include/aros/stdc");
+            addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+        }// OPT_no_stdc endif
+    }// OPT_nobuiltininc endif
+}
+
+void AROSToolChain::
+AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                          llvm::opt::ArgStringList &CC1Args) const {
+    if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+        return;
+
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+}
+
+void AROSToolChain::
+addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                      llvm::opt::ArgStringList &CC1Args,
+                      Action::OffloadKind DeviceOffloadingKind) const {
+    if (DriverArgs.hasArg(options::OPT_posixc)) {
+        CC1Args.push_back("-D_POSIX_SOURCE");
+    }
+    if (DriverArgs.hasArg(options::OPT_nix)) {
+        CC1Args.push_back("-D__NIX__");
+    }
+}
+
+
+void AROSToolChain::
+AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const {
+    if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+        DriverArgs.hasArg(options::OPT_nostdincxx))
+        return;
+
+    SmallString<128> ClangBinDir(getDriver().InstalledDir);
+    switch (GetCXXStdlibType(DriverArgs)) {
+    case ToolChain::CST_Libcxx: {
+        SmallString<128> Dir(ClangBinDir);
+        llvm::sys::path::append(Dir, "..", "include", "c++", "v1");
+        llvm::sys::fs::make_absolute(Dir);
+        llvm::sys::path::remove_dots(Dir, /*remove_dot_dot=*/true);
+        addSystemInclude(DriverArgs, CC1Args, Dir.str());
+        break;
+    }
+    case ToolChain::CST_Libstdcxx:
+        break;
+    }
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+}
+
+void AROSToolChain::
+AddCXXStdlibLibArgs(const llvm::opt::ArgList &DriverArgs,
+                    llvm::opt::ArgStringList &CC1Args) const {
+    SmallString<128> ClangBinDir(getDriver().InstalledDir);
+    switch (GetCXXStdlibType(DriverArgs)) {
+    case ToolChain::CST_Libcxx: {
+        SmallString<128> Dir(ClangBinDir);
+        llvm::sys::path::append(Dir, "..", "lib");
+        llvm::sys::fs::make_absolute(Dir);
+        llvm::sys::path::remove_dots(Dir, /*remove_dot_dot=*/true);
+        CC1Args.push_back(DriverArgs.MakeArgString("-L" + Dir));
+        CC1Args.push_back("-lc++");
+        CC1Args.push_back("-lc++abi");
+        CC1Args.push_back("-lunwind");
+        break;
+    }
+    case ToolChain::CST_Libstdcxx:
+        CC1Args.push_back("-lstdc++");
+        break;
+    }
+}
+
+void AROSToolChain::
+addStartObjectFileArgs(const llvm::opt::ArgList &Args,
+                       llvm::opt::ArgStringList &CmdArgs) const {
+    if (Args.hasArg(options::OPT_nostartfiles))
+        return;
+
+    const Driver &D = getDriver();
+    const std::string &SysRoot = D.SysRoot;
+    SmallString<128> LibPath(SysRoot);
+    const llvm::Triple &Target = getTriple();
+    llvm::Triple CompilerTarget(LLVM_DEFAULT_TARGET_TRIPLE);
+    SmallString<10> tgtPath("lib/");
+    if (Target.isArch32Bit() && CompilerTarget.isArch64Bit()) {
+        SmallString<128> TstLibPath(LibPath);
+        llvm::sys::path::append(TstLibPath, "lib32/");
+        if (getVFS().exists(TstLibPath))
+            tgtPath.assign("lib32/");
+    }
+    llvm::sys::path::append(LibPath, tgtPath);
+
+    // Derived from startfile spec.
+    CmdArgs.push_back(Args.MakeArgString(LibPath + "startup.o"));
+    if (Args.hasArg(options::OPT_detach)) {
+        CmdArgs.push_back(Args.MakeArgString(LibPath + "detach.o"));
+    }
+    if (Args.hasArg(options::OPT_nix)) {
+        CmdArgs.push_back(Args.MakeArgString(LibPath + "nixmain.o"));
+    }
+}
+
+
+Tool *AROSToolChain::buildAssembler() const {
+    return new tools::AROS::Assembler(*this);
+}
+
+Tool *AROSToolChain::buildLinker() const {
+    return new tools::AROS::Linker(*this);
+}
diff -ruN clang-11.0.0.src/lib/Driver/ToolChains/AROS.h clang-11.0.0.src.aros/lib/Driver/ToolChains/AROS.h
--- clang-11.0.0.src/lib/Driver/ToolChains/AROS.h	1970-01-01 00:00:00.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Driver/ToolChains/AROS.h	2025-07-10 19:01:20.153051071 +0000
@@ -0,0 +1,107 @@
+//===--- AROS.h - AROS ToolChain Implementations ----------*- C -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
+
+#include "Gnu.h"
+#include "clang/Driver/Tool.h"
+#include "clang/Driver/ToolChain.h"
+#include "llvm/Config/llvm-config.h" // for LLVM_DEFAULT_TARGET_TRIPLE
+
+namespace clang {
+namespace driver {
+namespace tools {
+
+/// AROS -- Directly call GNU Binutils assembler and linker
+namespace AROS {
+class LLVM_LIBRARY_VISIBILITY Assembler : public Tool {
+public:
+  Assembler(const ToolChain &TC)
+      : Tool("AROS::Assembler", "assembler", TC) {}
+
+  bool hasIntegratedCPP() const override { return false; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+class LLVM_LIBRARY_VISIBILITY Linker : public Tool {
+public:
+  Linker(const ToolChain &TC)
+      : Tool("AROS::Linker", "linker", TC) {}
+
+  bool hasIntegratedCPP() const override { return false; }
+  bool isLinkJob() const override { return true; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+} // end namespace AROS
+} // end namespace tools
+
+namespace toolchains {
+class LLVM_LIBRARY_VISIBILITY AROSToolChain : public Generic_ELF {
+public:
+  AROSToolChain(const Driver &D,
+                const llvm::Triple &Triple,
+                const llvm::opt::ArgList &Args);
+
+  void AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+
+  void addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args,
+                             Action::OffloadKind DeviceOffloadKind) const override;
+
+  void AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const override;
+
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args,
+                           llvm::opt::ArgStringList &CmdArgs) const override;
+
+  void addStartObjectFileArgs(const llvm::opt::ArgList &Args,
+                              llvm::opt::ArgStringList &CmdArgs) const;
+
+  RuntimeLibType GetDefaultRuntimeLibType() const override {
+    return ToolChain::RLT_CompilerRT;
+  }
+
+  CXXStdlibType GetDefaultCXXStdlibType() const override {
+    return ToolChain::CST_Libcxx;
+  }
+
+  const char *getDefaultLinker() const override {
+    const llvm::Triple &Target = getTriple();
+    llvm::Triple CompilerTarget(LLVM_DEFAULT_TARGET_TRIPLE);
+
+    if (Target.isArch32Bit() && CompilerTarget.isArch64Bit())
+      return "collect-aros32";
+
+    return "collect-aros";
+  }
+private:
+  void AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const;
+
+protected:
+  Tool *buildAssembler() const override;
+  Tool *buildLinker() const override;
+};
+
+
+} // end namespace toolchains
+} // end namespace driver
+} // end namespace clang
+
+#endif // LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
diff -ruN clang-11.0.0.src/lib/Frontend/InitHeaderSearch.cpp clang-11.0.0.src.aros/lib/Frontend/InitHeaderSearch.cpp
--- clang-11.0.0.src/lib/Frontend/InitHeaderSearch.cpp	2020-10-07 10:10:48.000000000 +0000
+++ clang-11.0.0.src.aros/lib/Frontend/InitHeaderSearch.cpp	2025-07-10 13:43:21.473240929 +0000
@@ -215,7 +215,7 @@
                                             const HeaderSearchOptions &HSOpts) {
   llvm::Triple::OSType os = triple.getOS();
 
-  if (triple.isOSDarwin()) {
+  if ((triple.isOSDarwin()) || (triple.isAROS())) {
     llvm_unreachable("Include management is handled in the driver.");
   }
 
